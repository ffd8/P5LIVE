{
  "version": "1.7.0",
  "revision": 54,
  "structure": [
    {
      "name": "demos",
      "mod": "1588903594629",
      "type": "folder",
      "toggle": "expand",
      "contents": [
        {
          "name": "new",
          "mod": "1713482983879",
          "type": "sketch",
          "code": "function setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\t\n}\n\nfunction draw() {\n\t\n}"
        },
        {
          "name": "recoding",
          "mod": "1713483337942",
          "type": "sketch",
          "code": "function setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n}\n\nfunction draw() {\n\t\n}"
        },
        {
          "name": "_meta",
          "mod": "1588034572005",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_meta_P5LIVE",
              "mod": "1698712812618",
              "type": "sketch",
              "code": "/*\t_meta_P5LIVE // cc teddavis.org 2019, 2021\t*/\n\nlet fontPath = 'includes/fonts/RobotoMono-Regular.ttf',\n\tfg, bg, pg, y = 0,\n\tw = 0,\n\tfc = 0,\n\tc = [0, 0, 255],\n\trBox = 0,\n\tc1 = 0,\n\tc2 = 255,\n\tdx = 7,\n\tdy = 4,\n\tfont\n\nfunction preload() {\n\tfont = loadFont(fontPath)\n}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tbackground(0)\n\tnoFill()\n\tfill(255)\n\tnoStroke()\n\tfg = createGraphics(width, height)\n\tbg = createGraphics(width, height)\n\tpg = createGraphics(width, height)\n\tbuildBox(fg)\n\tbuildBox(bg)\n\tbuildBox(pg)\n\ttextFont(font)\n\ttextSize(48)\n\ttextAlign(CENTER, BOTTOM)\n\tbuildP5LIVE()\n}\n\nfunction draw() {\n\tbackground(0)\n\tnoCursor()\n\torbitControl(5)\n\n\trotateX(radians(0))\n\trotateY(radians(sin(fc * 0.005) * 25))\n\n\tscale(0.57)\n\n\tif(frameCount % 8 === 0) {\n\t\ty += 20\n\t\tif(y > height) {\n\t\t\ty = 0\n\t\t\tbuildBox(fg)\n\t\t\tc = [random(255), random(255), random(255)]\n\t\t\tc1 = random(255)\n\t\t\tc2 = random(255)\n\t\t\tlet dd = 4\n\t\t\tdx = floor(random(1, dd))\n\t\t\tdy = floor(random(1, dd))\n\t\t\tbuildBox(bg)\n\t\t}\n\t\tfg.fill(255)\n\t\tfg.noStroke()\n\t\tif(random(1) > 0.25)\n\t\t\tfg.rect(0, y, random(50, 350), 15)\n\t}\n\n\tbg.fill(c1)\n\tbg.stroke(c2)\n\tbg.strokeWeight(1)\n\tbg.ellipse(frameCount * dx % width, fc * dy % height, 50 + sin(fc * 0.03) * 250)\n\n\n\n\tpush()\n\ttranslate(0, 0, -100)\n\tbuildFont('p5.js', -width / 2)\n\ttexture(bg)\n\tplane(bg.width, bg.height)\n\tpop()\n\n\tbuildFont('ace-editor', -width / 2)\n\ttexture(fg)\n\tplane(fg.width, fg.height)\n\n\t// P5LIVE \n\t// label\n\tpush()\n\ttranslate(0, 0, 100)\n\tbuildFont('P5LIVE', -width / 2)\n\tpop()\n\n\t// layer\n\tpush()\n\ttranslate(0, 0, 100)\n\ttexture(pg)\n\tplane(pg.width, pg.height)\n\tpop()\n\n\t// cursor\n\ttranslate(0, 0, 101)\n\tfill(255)\n\tlet mx = map(mouseX - width / 2, 0, width, 0, pg.width)\n\tlet my = map(mouseY - height / 2, 0, height, 0, pg.height)\n\tlet mscl = height * .04\n\ttextSize(mscl)\n\ttext('+', mx, my)\n\n\tfc++\n}\n\nfunction buildGUI(label, yoffset, yheight) {\n\tlet bw = pg.width * 0.18\n\tpg.fill(80)\n\tpg.rect(pg.width * 0.99 - bw, yoffset, bw, yheight)\n\tpg.fill(30)\n\tpg.rect(pg.width * 0.99 - bw, yoffset, bw, pg.height * 0.03)\n\tpg.fill(200)\n\tpg.textSize(18)\n\tpg.text(label, pg.width * 0.99 - bw + 5, yoffset + 5, bw, pg.height * 0.03)\n}\n\nfunction buildBox(tg) {\n\ttg.clear()\n\ttg.noFill()\n\ttg.stroke(255)\n\ttg.strokeWeight(3)\n\ttg.rect(1, 1, tg.width - 2, tg.height - 2)\n}\n\nfunction buildFont(txt, xoff) {\n\tpush()\n\tlet yoff = 50\n\tlet slant = 50\n\ttranslate(xoff, -height / 2)\n\tfill(255)\n\tnoStroke()\n\ttext(txt, -slant, -yoff)\n\n\tstroke(255)\n\tline(0, 0, -slant, -yoff)\n\tnoStroke()\n\tpop()\n}\n\nfunction buildP5LIVE() {\n\tpush()\n\ttranslate(0, 0, 100)\n\t// buildFont('P5LIVE', -width / 2)\n\tpg.clear()\n\tbuildBox(pg)\n\tpush()\n\tpg.noStroke()\n\tpg.fill(150, 100)\n\tlet bw = pg.width * 0.2\n\tpg.rect(pg.width - 1 - bw, 1, bw, pg.height - 2)\n\tpop()\n\tpg.noFill()\n\tpg.stroke(150)\n\tpg.strokeWeight(1)\n\n\t// p5live\n\tbuildGUI('P5LIVE', pg.height * 0.025, pg.height * 0.08)\n\n\t// cocoding\n\tbuildGUI('COCODING', pg.height * 0.125, pg.height * 0.08)\n\n\t// recoding\n\tbuildGUI('RECODING', pg.height * 0.225, pg.height * 0.08)\n\n\t// sketches\n\tbuildGUI('SKETCHES', pg.height * 0.325, pg.height * 0.65)\n\n\tlet sketchH = pg.height * 0.02\n\tlet sc = 0\n\tfor(let i = 0; i < pg.height * 0.55; i += sketchH) {\n\t\tpg.noStroke()\n\t\tpg.fill(60)\n\t\tif(sc % 3 === 0 || sc % 4 === 0) {\n\t\t\tpg.fill(30)\n\t\t}\n\n\t\tif(sc == 5) {\n\t\t\tpg.fill(30, 100, 30)\n\t\t}\n\t\tlet sw = pg.width * 0.18\n\t\tpg.rect(pg.width * 0.99 - sw, pg.height * 0.325 + pg.height * 0.08 + i, sw, sketchH)\n\t\tsc++\n\t}\n}"
            },
            {
              "name": "_meta_P5LIVE_COCODING",
              "mod": "1700956907179",
              "type": "sketch",
              "code": "/*\t_meta_P5LIVE_COCODING // cc teddavis.org 2019-23\t*/\n\nlet fontPath = 'includes/fonts/RobotoMono-Regular.ttf',\n\tfg, bg, plg, y = 0,\n\tw = 0,\n\tfc = 0,\n\tc = [0, 0, 255],\n\trBox = 0,\n\tc1 = 0,\n\tc2 = 255,\n\tdx = 7,\n\tdy = 4,\n\tfont, colors = [],\n\tcolorsSel = 0,\n\tcocoders = 6\n\nfunction preload() {\n\t\tfont = loadFont(fontPath)\n\t}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tbackground(0)\n\tnoStroke()\n\ttextFont(font)\n\ttextSize(48)\n\ttextAlign(CENTER, BOTTOM)\n\tfg = createGraphics(width / 4, height)\n\tbg = createGraphics(width, height, WEBGL)\n\tplg = createGraphics(fg.width * cocoders *1.2, height)\n\tbuildBox(fg, color(255))\n\tbuildBox(bg, color(255))\n\tbuildBox(plg, color(255))\n\tbg.background(50)\n\tgenColors()\n}\n\nfunction draw() {\n\tbackground(0)\n\torbitControl(5)\n\trotateY(-radians(sin(fc * .0015) * 45))\n\trotateX(radians(sin(fc * .0025) * 25))\n\tscale(.55)\n\n\tif(random(1) > .97) {\n\t\ty += 20\n\t\tif(y > height) {\n\t\t\ty = 5\n\t\t\tbuildBox(fg, 255)\n\t\t\tc = [random(255), random(255), random(255)]\n\n\t\t\tlet dd = 4\n\t\t\tdx = floor(random(1, dd))\n\t\t\tdy = floor(random(1, dd))\n\t\t\tgenColors()\n\t\t\tbg.background(50)\n\t\t}\n\n\t\tif(random(1) > .5) {\n\t\t\tcolorsSel = floor(random(colors.length))\n\t\t}\n\t\tfg.fill(colors[colorsSel])\n\t\tfg.noStroke()\n\t\tif(random(1) > .25)\n\t\t\tfg.rect(5, y, random(50, 250), 15)\n\t}\n\n\tc1 = abs(sin(frameCount * .1) * 255)\n\tc2 = 255 - c1\n\tbg.reset()\n\n\tbg.rotateY(radians(frameCount / 4))\n\tfor(let i = 1; i < cocoders+1; i++) {\n\t\tbg.noStroke()\n\t\tbg.fill(255)\n\t\tbg.noFill()\n\t\tbg.strokeWeight(.125)\n\t\tbg.stroke(colors[i - 1])\n\t\tbg.rotateY(radians(i * .6 + frameCount / i))\n\t\tbg.translate(width / 8, height / 6)\n\t\tbg.rotateZ(radians(i * .6 + frameCount / i))\n\t\tbg.translate(width / 8, height / 8)\n\t\tif(colorsSel + 1 == i) {\n\t\t\tbg.torus(i * 30, i * 10)\n\t\t}\n\t}\n\n\tpush()\n\ttranslate(0, 0, -120)\n\tbuildFont('p5.js', -width / 2, color(255))\n\ttexture(bg)\n\tplane(bg.width, bg.height)\n\tpop()\n\n\trBox = colorsSel\n\n\tfor(let i = 0; i < cocoders; i++) {\n\t\tlet xoff = fg.width * cocoders / 2.1\n\t\tlet x = map(i, 0, cocoders - 1, -xoff , xoff)\n\t\tpush()\n\t\ttranslate(x, 0)\n\n\t\tif(rBox == i) {\n\t\t\tlet setColor = color(colors[i].levels)\n\t\t\tsetColor.setAlpha(100)\n\t\t\tfill(setColor)\n\t\t\tnoStroke()\n\t\t\tpush()\n\t\t\ttranslate(0, 0, -1)\n\t\t\tplane(fg.width, fg.height)\n\t\t\tpop()\n\t\t}\n\n\t\tbuildFont('COCODER ' + (i + 1), 0, colors[i])\n\t\ttexture(fg)\n\t\tplane(fg.width, fg.height)\n\t\tpop()\n\t}\n\n\tpush()\n\ttranslate(0, 0, 100)\n\tbuildFont('P5LIVE', -plg.width / 2, color(255))\n\n\ttexture(plg)\n\tplane(plg.width, plg.height)\n\tpop()\n\n\tfc++\n}\n\nfunction genColors() {\n\tcolors = []\n\tfor(let i = 0; i < cocoders; i++) {\n\t\tcolors.push(color(random(255), random(255), random(255)))\n\t}\n}\n\nfunction buildBox(pg, col) {\n\tpg.clear()\n\tpg.noFill()\n\tpg.stroke(col)\n\tpg.strokeWeight(3)\n\tpg.rect(1, 1, pg.width - 2, pg.height - 2)\n}\n\nfunction buildFont(txt, xoff, col) {\n\tpush()\n\tlet yoff = 50\n\tlet slant = 50\n\ttranslate(xoff, -height / 2)\n\tfill(col)\n\tnoStroke()\n\ttext(txt, -slant, -yoff)\n\t\n\tstroke(255)\n\tline(0, 0, -slant, -yoff)\n\tnoStroke()\n\tpop()\n}"
            },
            {
              "name": "_meta_basel.codes",
              "mod": "1698712810913",
              "type": "sketch",
              "code": "/*\t\n\t_meta_basel.codes\n\thttps://basel.codes/2019 // PCD 2019\n\t+ why P5LIVE was created!\n\t@maxfrischknecht\n\t@yannmartins\n\t@teddavis\n\tmodified Boid class to ES5\n*/\n\nlet personaggini = []\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\ttextAlign(CENTER, CENTER)\n\tvar loopc = innerWidth / 100\n\tvar brdr = 20\n\tpersonaggini = []\n\tfor(var i = 0; i < loopc; i++) {\n\t\tpersonaggini.push(new Boid(random(brdr, width - brdr), random(brdr, height - brdr)))\n\t}\n\n}\n\nfunction draw() {\n\tbackground(0)\n\tfor(let boid of personaggini) {\n\t\tboid.update()\n\t\tboid.proximity(personaggini)\n\t\tboid.edges()\n\t\tboid.show(personaggini)\n\t}\n}\n\nfunction mousePressed() {\n\tpersonaggini.push(new Boid(mouseX, mouseY))\n}\n\nfunction keyPressed() {\n\tif(keyCode == 8) {\n\t\tpersonaggini = []\n\t}\n\n}\n\n\nvar emojis = [\n\t'🦄', '👶', '👶🏻', '👶🏼', '👶🏽', '👶🏾', '👶🏿', '🧒', '🧒🏻', '🧒🏼', '🧒🏽', '🧒🏾', '🧒🏿', '👦', '👦🏻', '👦🏼', '👦🏽', '👦🏾', '👦🏿', '👧', '👧🏻', '👧🏼', '👧🏽', '👧🏾', '👧🏿', '🧑', '🧑🏻', '🧑🏼', '🧑🏽', '🧑🏾', '🧑🏿', '👨', '👨🏻', '👨🏼', '👨🏽', '👨🏾', '👨🏿', '👩', '👩🏻', '👩🏼', '👩🏽', '👩🏾', '👩🏿', '🧓', '🧓🏻', '🧓🏼', '🧓🏽', '🧓🏾', '🧓🏿', '👴', '👴🏻', '👴🏼', '👴🏽', '👴🏾', '👴🏿', '👵', '👵🏻', '👵🏼', '👵🏽', '👵🏾', '👵🏿', '👨‍⚕️', '👨‍⚕', '👨🏻‍⚕️', '👨🏻‍⚕', '👨🏼‍⚕️', '👨🏼‍⚕', '👨🏽‍⚕️', '👨🏽‍⚕', '👨🏾‍⚕️', '👨🏾‍⚕', '👨🏿‍⚕️', '👨🏿‍⚕', '👩‍⚕️', '👩‍⚕', '👩🏻‍⚕️', '👩🏻‍⚕', '👩🏼‍⚕️', '👩🏼‍⚕', '👩🏽‍⚕️', '👩🏽‍⚕', '👩🏾‍⚕️', '👩🏾‍⚕', '👩🏿‍⚕️', '👩🏿‍⚕', '👨‍🎓', '👨🏻‍🎓', '👨🏼‍🎓', '👨🏽‍🎓', '👨🏾‍🎓', '👨🏿‍🎓', '👩‍🎓', '👩🏻‍🎓', '👩🏼‍🎓', '👩🏽‍🎓', '👩🏾‍🎓', '👩🏿‍🎓', '👨‍🏫', '👨🏻‍🏫', '👨🏼‍🏫', '👨🏽‍🏫', '👨🏾‍🏫', '👨🏿‍🏫', '👩‍🏫', '👩🏻‍🏫', '👩🏼‍🏫', '👩🏽‍🏫', '👩🏾‍🏫', '👩🏿‍🏫', '👨‍⚖️', '👨‍⚖', '👨🏻‍⚖️', '👨🏻‍⚖', '👨🏼‍⚖️', '👨🏼‍⚖', '👨🏽‍⚖️', '👨🏽‍⚖', '👨🏾‍⚖️', '👨🏾‍⚖', '👨🏿‍⚖️', '👨🏿‍⚖', '👩‍⚖️', '👩‍⚖', '👩🏻‍⚖️', '👩🏻‍⚖', '👩🏼‍⚖️', '👩🏼‍⚖', '👩🏽‍⚖️', '👩🏽‍⚖', '👩🏾‍⚖️', '👩🏾‍⚖', '👩🏿‍⚖️', '👩🏿‍⚖', '👨‍🌾', '👨🏻‍🌾', '👨🏼‍🌾', '👨🏽‍🌾', '👨🏾‍🌾', '👨🏿‍🌾', '👩‍🌾', '👩🏻‍🌾', '👩🏼‍🌾', '👩🏽‍🌾', '👩🏾‍🌾', '👩🏿‍🌾', '👨‍🍳', '👨🏻‍🍳', '👨🏼‍🍳', '👨🏽‍🍳', '👨🏾‍🍳', '👨🏿‍🍳', '👩‍🍳', '👩🏻‍🍳', '👩🏼‍🍳', '👩🏽‍🍳', '👩🏾‍🍳', '👩🏿‍🍳', '👨‍🔧', '👨🏻‍🔧', '👨🏼‍🔧', '👨🏽‍🔧', '👨🏾‍🔧', '👨🏿‍🔧', '👩‍🔧', '👩🏻‍🔧', '👩🏼‍🔧', '👩🏽‍🔧', '👩🏾‍🔧', '👩🏿‍🔧', '👨‍🏭', '👨🏻‍🏭', '👨🏼‍🏭', '👨🏽‍🏭', '👨🏾‍🏭', '👨🏿‍🏭', '👩‍🏭', '👩🏻‍🏭', '👩🏼‍🏭', '👩🏽‍🏭', '👩🏾‍🏭', '👩🏿‍🏭', '👨‍💼', '👨🏻‍💼', '👨🏼‍💼', '👨🏽‍💼', '👨🏾‍💼', '👨🏿‍💼', '👩‍💼', '👩🏻‍💼', '👩🏼‍💼', '👩🏽‍💼', '👩🏾‍💼', '👩🏿‍💼', '👨‍🔬', '👨🏻‍🔬', '👨🏼‍🔬', '👨🏽‍🔬', '👨🏾‍🔬', '👨🏿‍🔬', '👩‍🔬', '👩🏻‍🔬', '👩🏼‍🔬', '👩🏽‍🔬', '👩🏾‍🔬', '👩🏿‍🔬', '👨‍💻', '👨🏻‍💻', '👨🏼‍💻', '👨🏽‍💻', '👨🏾‍💻', '👨🏿‍💻', '👩‍💻', '👩🏻‍💻', '👩🏼‍💻', '👩🏽‍💻', '👩🏾‍💻', '👩🏿‍💻', '👨‍🎤', '👨🏻‍🎤', '👨🏼‍🎤', '👨🏽‍🎤', '👨🏾‍🎤', '👨🏿‍🎤', '👩‍🎤', '👩🏻‍🎤', '👩🏼‍🎤', '👩🏽‍🎤', '👩🏾‍🎤', '👩🏿‍🎤', '👨‍🎨', '👨🏻‍🎨', '👨🏼‍🎨', '👨🏽‍🎨', '👨🏾‍🎨', '👨🏿‍🎨', '👩‍🎨', '👩🏻‍🎨', '👩🏼‍🎨', '👩🏽‍🎨', '👩🏾‍🎨', '👩🏿‍🎨', '👨‍✈️', '👨‍✈', '👨🏻‍✈️', '👨🏻‍✈', '👨🏼‍✈️', '👨🏼‍✈', '👨🏽‍✈️', '👨🏽‍✈', '👨🏾‍✈️', '👨🏾‍✈', '👨🏿‍✈️', '👨🏿‍✈', '👩‍✈️', '👩‍✈', '👩🏻‍✈️', '👩🏻‍✈', '👩🏼‍✈️', '👩🏼‍✈', '👩🏽‍✈️', '👩🏽‍✈', '👩🏾‍✈️', '👩🏾‍✈', '👩🏿‍✈️', '👩🏿‍✈', '👨‍🚀', '👨🏻‍🚀', '👨🏼‍🚀', '👨🏽‍🚀', '👨🏾‍🚀', '👨🏿‍🚀', '👩‍🚀', '👩🏻‍🚀', '👩🏼‍🚀', '👩🏽‍🚀', '👩🏾‍🚀', '👩🏿‍🚀', '👨‍🚒', '👨🏻‍🚒', '👨🏼‍🚒', '👨🏽‍🚒', '👨🏾‍🚒', '👨🏿‍🚒', '👩‍🚒', '👩🏻‍🚒', '👩🏼‍🚒', '👩🏽‍🚒', '👩🏾‍🚒', '👩🏿‍🚒', '👮', '👮🏻', '👮🏼', '👮🏽', '👮🏾', '👮🏿', '👮‍♂️', '👮‍♂', '👮🏻‍♂️', '👮🏻‍♂', '👮🏼‍♂️', '👮🏼‍♂', '👮🏽‍♂️', '👮🏽‍♂', '👮🏾‍♂️', '👮🏾‍♂', '👮🏿‍♂️', '👮🏿‍♂', '👮‍♀️', '👮‍♀', '👮🏻‍♀️', '👮🏻‍♀', '👮🏼‍♀️', '👮🏼‍♀', '👮🏽‍♀️', '👮🏽‍♀', '👮🏾‍♀️', '👮🏾‍♀', '👮🏿‍♀️', '👮🏿‍♀', '🕵️', '🕵', '🕵🏻', '🕵🏼', '🕵🏽', '🕵🏾', '🕵🏿', '🕵️‍♂️', '🕵‍♂️', '🕵️‍', '🕵‍♂', '🕵🏻‍♂️', '🕵🏻‍♂', '🕵🏼‍♂️', '🕵🏼‍♂', '🕵🏽‍♂️', '🕵🏽‍♂', '🕵🏾‍♂️', '🕵🏾‍♂', '🕵🏿‍♂️', '🕵🏿‍♂', '🕵️‍♀️', '🕵‍♀️', '🕵️‍', '🕵‍♀', '🕵🏻‍♀️', '🕵🏻‍♀', '🕵🏼‍♀️', '🕵🏼‍♀', '🕵🏽‍♀️', '🕵🏽‍♀', '🕵🏾‍♀️', '🕵🏾‍♀', '🕵🏿‍♀️', '🕵🏿‍♀', '💂', '💂🏻', '💂🏼', '💂🏽', '💂🏾', '💂🏿', '💂‍♂️', '💂‍♂', '💂🏻‍♂️', '💂🏻‍♂', '💂🏼‍♂️', '💂🏼‍♂', '💂🏽‍♂️', '💂🏽‍♂', '💂🏾‍♂️', '💂🏾‍♂', '💂🏿‍♂️', '💂🏿‍♂', '💂‍♀️', '💂‍♀', '💂🏻‍♀️', '💂🏻‍♀', '💂🏼‍♀️', '💂🏼‍♀', '💂🏽‍♀️', '💂🏽‍♀', '💂🏾‍♀️', '💂🏾‍♀', '💂🏿‍♀️', '💂🏿‍♀', '👷', '👷🏻', '👷🏼', '👷🏽', '👷🏾', '👷🏿', '👷‍♂️', '👷‍♂', '👷🏻‍♂️', '👷🏻‍♂', '👷🏼‍♂️', '👷🏼‍♂', '👷🏽‍♂️', '👷🏽‍♂', '👷🏾‍♂️', '👷🏾‍♂', '👷🏿‍♂️', '👷🏿‍♂', '👷‍♀️', '👷‍♀', '👷🏻‍♀️', '👷🏻‍♀', '👷🏼‍♀️', '👷🏼‍♀', '👷🏽‍♀️', '👷🏽‍♀', '👷🏾‍♀️', '👷🏾‍♀', '👷🏿‍♀️', '👷🏿‍♀', '🤴', '🤴🏻', '🤴🏼', '🤴🏽', '🤴🏾', '🤴🏿', '👸', '👸🏻', '👸🏼', '👸🏽', '👸🏾', '👸🏿', '👳', '👳🏻', '👳🏼', '👳🏽', '👳🏾', '👳🏿', '👳‍♂️', '👳‍♂', '👳🏻‍♂️', '👳🏻‍♂', '👳🏼‍♂️', '👳🏼‍♂', '👳🏽‍♂️', '👳🏽‍♂', '👳🏾‍♂️', '👳🏾‍♂', '👳🏿‍♂️', '👳🏿‍♂', '👳‍♀️', '👳‍♀', '👳🏻‍♀️', '👳🏻‍♀', '👳🏼‍♀️', '👳🏼‍♀', '👳🏽‍♀️', '👳🏽‍♀', '👳🏾‍♀️', '👳🏾‍♀', '👳🏿‍♀️', '👳🏿‍♀', '👲', '👲🏻', '👲🏼', '👲🏽', '👲🏾', '👲🏿', '🧕', '🧕🏻', '🧕🏼', '🧕🏽', '🧕🏾', '🧕🏿', '🧔', '🧔🏻', '🧔🏼', '🧔🏽', '🧔🏾', '🧔🏿', '👱', '👱🏻', '👱🏼', '👱🏽', '👱🏾', '👱🏿', '👱‍♂️', '👱‍♂', '👱🏻‍♂️', '👱🏻‍♂', '👱🏼‍♂️', '👱🏼‍♂', '👱🏽‍♂️', '👱🏽‍♂', '👱🏾‍♂️', '👱🏾‍♂', '👱🏿‍♂️', '👱🏿‍♂', '👱‍♀️', '👱‍♀', '👱🏻‍♀️', '👱🏻‍♀', '👱🏼‍♀️', '👱🏼‍♀', '👱🏽‍♀️', '👱🏽‍♀', '👱🏾‍♀️', '👱🏾‍♀', '👱🏿‍♀️', '👱🏿‍♀', '👨‍', '👨🏻‍', '👨🏼‍', '👨🏽‍', '👨🏾‍', '👨🏿‍', '👩‍', '👩🏻‍', '👩🏼‍', '👩🏽‍', '👩🏾‍', '👩🏿‍', '👨‍', '👨🏻‍', '👨🏼‍', '👨🏽‍', '👨🏾‍', '👨🏿‍', '👩‍', '👩🏻‍', '👩🏼‍', '👩🏽‍', '👩🏾‍', '👩🏿‍', '👨‍', '👨🏻‍', '👨🏼‍', '👨🏽‍', '👨🏾‍', '👨', '👩‍', '👩🏻‍', '👩🏼‍', '👩🏽‍', '👩🏾‍', '👩', '👨', '👨🏻', '👨🏼', '👨🏽', '👨🏾', '👨🏿', '👩', '👩🏻', '👩🏼', '👩🏽', '👩🏾', '👩🏿‍', '🤵', '🤵🏻', '🤵🏼', '🤵🏽', '🤵🏾', '🤵🏿', '👰', '👰🏻', '👰🏼', '👰🏽', '👰🏾', '👰🏿', '🤰', '🤰🏻', '🤰🏼', '🤰🏽', '🤰🏾', '🤰🏿', '🤱', '🤱🏻', '🤱🏼', '🤱🏽', '🤱🏾', '🤱🏿', '👼', '👼🏻', '👼🏼', '👼🏽', '👼🏾', '👼🏿', '🎅', '🎅🏻', '🎅🏼', '🎅🏽', '🎅🏾', '🎅🏿', '🤶', '🤶🏻', '🤶🏼', '🤶🏽', '🤶🏾', '🤶🏿', '🧙', '🧙🏻', '🧙🏼', '🧙🏽', '🧙🏾', '🧙🏿', '🧙‍♀️', '🧙‍♀', '🧙🏻‍♀️', '🧙🏻‍♀', '🧙🏼‍♀️', '🧙🏼‍♀', '🧙🏽‍♀️', '🧙🏽‍♀', '🧙🏾‍♀️', '🧙🏾‍♀', '🧙🏿‍♀️', '🧙🏿‍♀', '🧙‍♂️', '🧙‍♂', '🧙🏻‍♂️', '🧙🏻‍♂', '🧙🏼‍♂️', '🧙🏼‍♂', '🧙🏽‍♂️', '🧙🏽‍♂', '🧙🏾‍♂️', '🧙🏾‍♂', '🧙🏿‍♂️', '🧙🏿‍♂', '🧚', '🧚🏻', '🧚🏼', '🧚🏽', '🧚🏾', '🧚🏿', '🧚‍♀️', '🧚‍♀', '🧚🏻‍♀️', '🧚🏻‍♀', '🧚🏼‍♀️', '🧚🏼‍♀', '🧚🏽‍♀️', '🧚🏽‍♀', '🧚🏾‍♀️', '🧚🏾‍♀', '🧚🏿‍♀️', '🧚🏿‍♀', '🧚‍♂️', '🧚‍♂', '🧚🏻‍♂️', '🧚🏻‍♂', '🧚🏼‍♂️', '🧚🏼‍♂', '🧚🏽‍♂️', '🧚🏽‍♂', '🧚🏾‍♂️', '🧚🏾‍♂', '🧚🏿‍♂️', '🧚🏿‍♂', '🧛', '🧛🏻', '🧛🏼', '🧛🏽', '🧛🏾', '🧛🏿', '🧛‍♀️', '🧛‍♀', '🧛🏻‍♀️', '🧛🏻‍♀', '🧛🏼‍♀️', '🧛🏼‍♀', '🧛🏽‍♀️', '🧛🏽‍♀', '🧛🏾‍♀️', '🧛🏾‍♀', '🧛🏿‍♀️', '🧛🏿‍♀', '🧛‍♂️', '🧛‍♂', '🧛🏻‍♂️', '🧛🏻‍♂', '🧛🏼‍♂️', '🧛🏼‍♂', '🧛🏽‍♂️', '🧛🏽‍♂', '🧛🏾‍♂️', '🧛🏾‍♂', '🧛🏿‍♂️', '🧛🏿‍♂', '🧜', '🧜🏻', '🧜🏼', '🧜🏽', '🧜🏾', '🧜🏿', '🧜‍♀️', '🧜‍♀', '🧜🏻‍♀️', '🧜🏻‍♀', '🧜🏼‍♀️', '🧜🏼‍♀', '🧜🏽‍♀️', '🧜🏽‍♀', '🧜🏾‍♀️', '🧜🏾‍♀', '🧜🏿‍♀️', '🧜🏿‍♀', '🧜‍♂️', '🧜‍♂', '🧜🏻‍♂️', '🧜🏻‍♂', '🧜🏼‍♂️', '🧜🏼‍♂', '🧜🏽‍♂️', '🧜🏽‍♂', '🧜🏾‍♂️', '🧜🏾‍♂', '🧜🏿‍♂️', '🧜🏿‍♂', '🧝', '🧝🏻', '🧝🏼', '🧝🏽', '🧝🏾', '🧝🏿', '🧝‍♀️', '🧝‍♀', '🧝🏻‍♀️', '🧝🏻‍♀', '🧝🏼‍♀️', '🧝🏼‍♀', '🧝🏽‍♀️', '🧝🏽‍♀', '🧝🏾‍♀️', '🧝🏾‍♀', '🧝🏿‍♀️', '🧝🏿‍♀', '🧝‍♂️', '🧝‍♂', '🧝🏻‍♂️', '🧝🏻‍♂', '🧝🏼‍♂️', '🧝🏼‍♂', '🧝🏽‍♂️', '🧝🏽‍♂', '🧝🏾‍♂️', '🧝🏾‍♂', '🧝🏿‍♂️', '🧝🏿‍♂', '🧞', '🧞‍♀️', '🧞‍♀', '🧞‍♂️', '🧞‍♂', '🧟', '🧟‍♀️', '🧟‍♀', '🧟‍♂️', '🧟‍♂', '🙎', '🙎🏻', '🙎🏼', '🙎🏽', '🙎🏾', '🙎🏿', '🙎‍♂️', '🙎‍♂', '🙎🏻‍♂️', '🙎🏻‍♂', '🙎🏼‍♂️', '🙎🏼‍♂', '🙎🏽‍♂️', '🙎🏽‍♂', '🙎🏾‍♂️', '🙎🏾‍♂', '🙎🏿‍♂️', '🙎🏿‍♂', '🙎‍♀️', '🙎‍♀', '🙎🏻‍♀️', '🙎🏻‍♀', '🙎🏼‍♀️', '🙎🏼‍♀', '🙎🏽‍♀️', '🙎🏽‍♀', '🙎🏾‍♀️', '🙎🏾‍♀', '🙎🏿‍♀️', '🙎🏿‍♀', '🚶', '🚶🏻', '🚶🏼', '🚶🏽', '🚶🏾', '🚶🏿', '🚶‍♂️', '🚶‍♂', '🚶🏻‍♂️', '🚶🏻‍♂', '🚶🏼‍♂️', '🚶🏼‍♂', '🚶🏽‍♂️', '🚶🏽‍♂', '🚶🏾‍♂️', '🚶🏾‍♂', '🚶🏿‍♂️', '🚶🏿‍♂', '🚶‍♀️', '🚶‍♀', '🚶🏻‍♀️', '🚶🏻‍♀', '🚶🏼‍♀️', '🚶🏼‍♀', '🚶🏽‍♀️', '🚶🏽‍♀', '🚶🏾‍♀️', '🚶🏾‍♀', '🚶🏿‍♀️', '🚶🏿‍♀', '🏃', '🏃🏻', '🏃🏼', '🏃🏽', '🏃🏾', '🏃🏿', '🏃‍♂️', '🏃‍♂', '🏃🏻‍♂️', '🏃🏻‍♂', '🏃🏼‍♂️', '🏃🏼‍♂', '🏃🏽‍♂️', '🏃🏽‍♂', '🏃🏾‍♂️', '🏃🏾‍♂', '🏃🏿‍♂️', '🏃🏿‍♂', '🏃‍♀️', '🏃‍♀', '🏃🏻‍♀️', '🏃🏻‍♀', '🏃🏼‍♀️', '🏃🏼‍♀', '🏃🏽‍♀️', '🏃🏽‍♀', '🏃🏾‍♀️', '🏃🏾‍♀', '🏃🏿‍♀️', '🏃🏿‍♀', '💃', '💃🏻', '💃🏼', '💃🏽', '💃🏾', '💃🏿', '🕺', '🕺🏻', '🕺🏼', '🕺🏽', '🕺🏾', '🕺🏿', '🧖', '🧖🏻', '🧖🏼', '🧖🏽', '🧖🏾', '🧖🏿', '🧖‍♀️', '🧖‍♀', '🧖🏻‍♀️', '🧖🏻‍♀', '🧖🏼‍♀️', '🧖🏼‍♀', '🧖🏽‍♀️', '🧖🏽‍♀', '🧖🏾‍♀️', '🧖🏾‍♀', '🧖🏿‍♀️', '🧖🏿‍♀', '🧖‍♂️', '🧖‍♂', '🧖🏻‍♂️', '🧖🏻‍♂', '🧖🏼‍♂️', '🧖🏼‍♂', '🧖🏽‍♂️', '🧖🏽‍♂', '🧖🏾‍♂️', '🧖🏾‍♂', '🧖🏿‍♂️', '🧖🏿‍♂', '🧘', '🧘🏻', '🧘🏼', '🧘🏽', '🧘🏾', '🧘🏿', '🧘‍♀️', '🧘‍♀', '🧘🏻‍♀️', '🧘🏻‍♀', '🧘🏼‍♀️', '🧘🏼‍♀', '🧘🏽‍♀️', '🧘🏽‍♀', '🧘🏾‍♀️', '🧘🏾‍♀', '🧘🏿‍♀️', '🧘🏿‍♀', '🧘‍♂️', '🧘‍♂', '🧘🏻‍♂️', '🧘🏻‍♂', '🧘🏼‍♂️', '🧘🏼‍♂', '🧘🏽‍♂️', '🧘🏽‍♂', '🧘🏾‍♂️', '🧘🏾‍♂', '🧘🏿‍♂️', '🧘🏿‍♂', '🕴️', '🕴', '🕴🏻', '🕴🏼', '🕴🏽', '🕴🏾', '🕴🏿', '👪', '👨‍👩‍👦', '👨‍👩‍👧', '👨‍👩‍👧‍👦', '👨‍👩‍👦‍👦', '👨‍👩‍👧‍👧', '👨‍👨‍👦', '👨‍👨‍👧', '👨‍👨‍👧‍👦', '👨‍👨‍👦‍👦', '👨‍👨‍👧‍👧', '👩‍👩‍👦', '👩‍👩‍👧', '👩‍👩‍👧‍👦', '👩‍👩‍👦‍👦', '👩‍👩‍👧‍👧', '👨‍👦', '👨‍👦‍👦', '👨‍👧', '👨‍👧‍👦', '👨‍👧‍👧', '👩‍👦', '👩‍👦‍👦', '👩‍👧', '👩‍👧‍👦', '👩‍👧‍👧', '🐵', '🐒', '🦍', '🐶', '🐕', '🐩', '🐺', '🦊', '🐱', '🐈', '🦁', '🐯', '🐅', '🐆', '🐴', '🐎', '🦄', '🦓', '🦌', '🐮', '🐂', '🐃', '🐄', '🐷', '🐖', '🐗', '🐽', '🐏', '🐑', '🐐', '🐪', '🐫', '🦒', '🐘', '🦏', '🐭', '🐁', '🐀', '🐹', '🐰', '🐇', '🐿️', '🐿', '🦔', '🦇', '🐻', '🐨', '🐼', '🐾', '🦃', '🐔', '🐓', '🐣', '🐤', '🐥', '🐦', '🐧', '🕊️', '🕊', '🦅', '🦆', '🦉', '🐸', '🐊', '🐢', '🦎', '🐍', '🐲', '🐉', '🦕', '🦖', '🐳', '🐋', '🐬', '🐟', '🐠', '🐡', '🦈', '🐙', '🐚', '🦀', '🦐', '🦑', '🐌', '🦋', '🐛', '🐜', '🐝', '🐞', '🦗', '🕷️', '🕷', '🦂', '🌍', '🌎', '🌏', '🏛️', '🏠', '🏢', '🏨', '🏫', '🏰', '⛪', '🕌', '🕍', '⛩️', '🕋', '⛺', '🚃', '🚄', '🚅', '🚆', '🚇', '🚈', '🚉', '🚊', '🚝', '🚞', '🚋', '🚌', '🚐', '🚎', '🚢', '🛥️', '🛳️', '✈️', '🛩️', '🚁', '🚟', '🚠', '🚡', '🚀', '🛸', '☃️', '⛄', '☃'\n]\n\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n\tif(!(instance instanceof Constructor)) {\n\t\tthrow new TypeError(\"Cannot call a class as a function\")\n\t}\n}\n\nvar Boid = (function() {\n\tfunction Boid(x, y) {\n\t\t_classCallCheck(this, Boid)\n\n\t\tthis.boid = random(emojis)\n\t\tthis.pos = createVector(x, y)\n\t\tthis.ppos = createVector(this.pos.x, this.pos.y)\n\t\tthis.rvel = 1.5\n\t\tthis.vel = createVector(\n\t\t\trandom(-this.rvel, this.rvel),\n\t\t\trandom(-this.rvel, this.rvel)\n\t\t)\n\t\tthis.r = random(15, 45)\n\t\tthis.directionx = 1\n\t\tthis.directiony = 1\n\t\tthis.maxSpeed = 50\n\t\tthis.trail = []\n\t}\n\n\tBoid.prototype.show = function show(balls) {\n\t\tthis.proximity(balls)\n\t\ttextSize(this.r)\n\t\ttext(this.boid, this.pos.x, this.pos.y)\n\t};\n\n\tBoid.prototype.update = function update() {\n\t\tthis.pos.x += this.vel.x * this.directionx\n\t\tthis.pos.y += this.vel.y * this.directiony\n\t};\n\n\tBoid.prototype.edges = function edges() {\n\t\tif(this.pos.x > width - this.r / 2 || this.pos.x < this.r / 2) {\n\t\t\tthis.directionx *= -1\n\t\t}\n\t\tif(this.pos.y > height - this.r / 2 || this.pos.y < this.r / 2) {\n\t\t\tthis.directiony *= -1\n\t\t}\n\t};\n\n\tBoid.prototype.proximity = function proximity(balls) {\n\t\tfor(\n\t\t\tvar _iterator = balls,\n\t\t\t\t_isArray = Array.isArray(_iterator),\n\t\t\t\t_i = 0,\n\t\t\t\t_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;\n\n\t\t) {\n\t\t\tvar _ref\n\n\t\t\tif(_isArray) {\n\t\t\t\tif(_i >= _iterator.length) break;\n\t\t\t\t_ref = _iterator[_i++];\n\t\t\t} else {\n\t\t\t\t_i = _iterator.next();\n\t\t\t\tif(_i.done) break;\n\t\t\t\t_ref = _i.value;\n\t\t\t}\n\n\t\t\tvar ball = _ref\n\n\t\t\tif(ball != this) {\n\t\t\t\tif(ball.pos.dist(this.pos) < 50) {\n\t\t\t\t\tstrokeWeight(2)\n\t\t\t\t\tstroke(255)\n\t\t\t\t\tline(ball.pos.x, ball.pos.y, this.pos.x, this.pos.y)\n\t\t\t\t\tif(this.r < 60) this.r += 0.1\n\t\t\t\t\tvar dir = p5.Vector.sub(this.pos, ball.pos)\n\t\t\t\t\tdir.normalize()\n\t\t\t\t\tif(\n\t\t\t\t\t\tthis.pos.y < height - this.r / 2 &&\n\t\t\t\t\t\tthis.pos.y > this.r / 2 &&\n\t\t\t\t\t\tthis.pos.x < width - this.r / 2 &&\n\t\t\t\t\t\tthis.pos.x > this.r / 2\n\t\t\t\t\t)\n\t\t\t\t\t\tthis.pos.add(dir)\n\t\t\t\t\tthis.ppos = this.pos\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\treturn Boid\n})()"
            }
          ]
        },
        {
          "name": "_canvas",
          "mod": "1607472428604",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_canvas_small",
              "mod": "1713268607560",
              "type": "sketch",
              "code": "/*\n\t_canvas_small // cc teddavis.org 2020\n\tdemo for working with SMALLER canvas than fullscreen\n\t= set position of small canvas and disable windowResized\n\tbonus: press 'S' to saveGif!\n*/\n\nfunction setup() {\n\tlet cvn = createCanvas(300, 300)\n\tcvn.position(windowWidth / 2 - width / 2, windowHeight / 2 - height / 2)\n\tbackground(0) // set initial background to see diff to canvas\n\twindowResized = null // remove built-in resizing\n}\n\nfunction draw() {\n\tbackground(0, 0, 255, 15)\n\tstroke(255)\n\tnoFill()\n\tbeginShape()\n\tlet lc = 8\n\tfor(let i = 0; i < lc; i++) {\n\t\tlet x = noise(i * 15 + frameCount * .01) * width\n\t\tlet y = noise(i * 15 + frameCount * .011) * height\n\t\tvertex(x, y)\n\t}\n\tendShape(CLOSE)\n}\n\nfunction keyPressed() {\n\tif(key == 'S') { // uppercase S\n\t\n\t\t// save 2sec of animation! + show notifications for 1 sec\n\t\tsaveGif('P5L_canvas_small', 2, {\n\t\t\tsilent: false,\n\t\t\tnotificationDuration: 1\n\t\t})\n\t}\n}"
            },
            {
              "name": "_canvas_poster",
              "mod": "1712882150203",
              "type": "sketch",
              "code": "/*\n\t_canvas_poster // cc teddavis.org 2020\n\tdemo for working with BIGGER canvas than fullscreen\n\t= draw to a layer that is x bigger than screen\n*/\n\nlet poster, scl = 1.0\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tposter = createGraphics(2348, 3370) // A0, 72dpi\n\tscl = (height - 100) / poster.height\n\timageMode(CENTER)\n}\n\nfunction draw() {\n\t// draw on poster layer\n\tposter.reset()\n\tposter.translate(poster.width / 2, poster.height / 2)\n\tposter.background(0, 0, 255)\n\tposter.noFill()\n\tposter.stroke(255)\n\tposter.textAlign(CENTER, CENTER)\n\tlet lc = 40;\n\tfor(let i = 0; i < lc; i++) {\n\t\tposter.push();\n\t\tposter.rotate(radians(map(i, 0, lc - 1, 90, 0)))\n\t\tposter.textSize(map(i, 0, lc - 1, poster.width, poster.width / 4))\n\t\tposter.strokeWeight(map(i, 0, lc - 1, .001, 4))\n\t\tposter.stroke(map(i, 0, lc - 1, 0, 255))\n\t\tposter.text(\"P5LIVE\", 0, 0)\n\t\tposter.pop()\n\t}\n\n\t// draw scaled poster to screen\n\tbackground(0)\n\timage(poster, width / 2, height / 2, poster.width * scl, poster.height * scl)\n\n\tnoLoop() // pause render\n}\n\nfunction keyPressed() {\n\t// save poster on 'S'\n\tif(key == 'S') {\n\t\tposter.save('poster.png')\n\t}\n}"
            },
            {
              "name": "_canvas_embed",
              "mod": "1712882153982",
              "type": "sketch",
              "code": "/*\n\t_canvas_embed // cc teddavis.org 2020\n\thow to embed (almost) ANYTHING behind our sketch!\n*/\n\nlet vidFrame, embedURL = \"https://www.youtube.com/embed/7HubjUPIftQ\"\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tlet vidW = windowWidth\n\tlet vidH = vidW / 16 * 9\n\tvidFrame = createDiv('vidPlayer')\n\tvidFrame.position(0, 0)\n\t// setup for YT, but replace with iframe of choice\n\tvidFrame.html('<iframe width=\"' + vidW + '\" height=\"' + vidH + '\" src=\"' + embedURL + '?rel=0&mute=1&autoplay=1&loop=1&controls=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media;\" allowfullscreen></iframe>');\n\tvidFrame.style('pointer-events', 'none') // prevent losing mouse\n\tvidFrame.style('z-index', -2) // send video back\n}\n\nfunction draw() {\n\tif(mouseIsPressed){\n\t\tclear()\n\t}\n\tnoCursor()\n\tfill(255)\n\ttextSize(100)\n\ttextAlign(CENTER, CENTER)\n\ttext(\"☕\", mouseX, mouseY)\n\ttranslate(mouseX, height - mouseY)\n\trotate(radians(180))\n\ttext(\"☕\", 0, 0)\n}"
            },
            {
              "name": "_canvas_chalkboard",
              "mod": "1713318494241",
              "type": "sketch",
              "code": "/*\n\t_canvas_chalkboard // cc teddavis.org 2020/23\n\tdisplay the Chalkboard in your sketch!\n\t\n\t- 'CTRL + B', or open from P5LIVE panel\n\t- set 'Drawing' from 0 - 9, set color, draw!\n\t- grab the current one p5live.chalkboard(#) // 0-9\n*/\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n}\n\nfunction draw() {\n\tbackground(0, 15)\n\n\t// draw from center out and rotate\n\timageMode(CENTER)\n\ttranslate(width / 2, height / 2)\n\trotate(radians(frameCount * 24.1))\n\n\t// display selected drawing\n\timage(p5live.chalkboard(0), 0, 0)\n}"
            },
            {
              "name": "_canvas_chalkboard_animation",
              "mod": "1713453468369",
              "type": "sketch",
              "code": "/*\n\t_canvas_chalkboard_animation // cc teddavis.org 2020\n\tuse the Chalkboard feature for ~10 frame animations!\n\t\n\t- 'CTRL + B', or open from P5LIVE panel\n\t- set 'Drawing' from 0 - 9, set color, draw!\n\t- grab them with p5live.chalkboard(#), # floors + wraps 0-9!\n\t- enjoy the show!\n*/\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\timageMode(CENTER)\n}\n\nfunction draw() {\n\tbackground(0, 10)\n\n\t// draw from center out (for rotation fun?!)\t\n\ttranslate(width / 2, height / 2)\n\n\t// look at specific chalkboard, 0 - 9\n\t// image(p5live.chalkboard(0), 0, 0)\n\n\t// animate through all 10 frames (uses %10 in the backend!)\n\timage(p5live.chalkboard(frameCount * .25), 0, 0)\n\n\t// animate only first 3 frames\n\t// image(p5live.chalkboard((frameCount * .25) % 3), 0, 0)\n}"
            },
            {
              "name": "_canvas_lofi",
              "mod": "1752024387977",
              "type": "sketch",
              "code": "/* \n\t_canvas_lofi // cc teddavis.org 2025\n\tLike lofi graphics? use p5live.fullCanvas()\n\tto force stretch any sized canvas to full screen.\n*/\n\np5live.fullCanvas() // force canvas to fullscreen\n\nlet scl = 10\n\nfunction setup() {\n\tcreateCanvas(windowWidth/scl, windowHeight/scl)\n}\n\nfunction draw() {\n\tstroke(frameCount*5%255)\n\t\n\tstrokeWeight(1)\n\tlet x = frameCount*.2%width\n\tline(x, 0, x, height)\n\t\n\tstrokeWeight(5)\n\tif(pmouseX != 0 && mouseX != 0){\n\t\tline(mouseX, mouseY, pmouseX, pmouseY)\n\t}\n}\n"
            },
            {
              "name": "_canvas_api",
              "mod": "1752019158945",
              "type": "sketch",
              "code": "/* \n\t_canvas_api // cc teddavis.org 2025\n\tWithout 'setup()' or using `// no p5` in code, \n\tyou can use P5LIVE for live-coding anything!?\n\tThis example adds animation/frameCount/mouseXY\n\t\n\tcanvas api docs:\n\thttps://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\n*/\n\n// create canvas, \nlet cnv = document.createElement('canvas')\nlet ctx = cnv.getContext(\"2d\")\ncnv.onload = init() // don't call it `setup()`\ndocument.body.append(cnv)\n\n// resize canvas with fullscreen\nwindow.addEventListener('resize', () => {\n\tcanvasSize(window.innerWidth, window.innerHeight)\n\t// p5live.recompile() // needed if no animation\n})\n\nfunction canvasSize(w, h, noStretch = false) {\n\twidth = w\n\theight = h\n\tcnv.width = w\n\tcnv.height = h\n\tif(noStretch) {\n\t\tcnv.style.width = `${w}px`\n\t\tcnv.style.height = `${h}px`\n\t}\n}\n\n// mouse tracking\nwindow.addEventListener('mousemove', (e) => {\n\tmouseX = e.clientX\n\tmouseY = e.clientY\n})\n\nfunction init() {\n\tcanvasSize(window.innerWidth, window.innerHeight)\n\t// canvasSize(400, 400, true)\n\tframeCount = mouseX = mouseY = 0\n\twindow.requestAnimationFrame(draw);\n}\n\nfunction draw() {\n\tconst gradient = ctx.createLinearGradient(0, 0, width, 0);\n\n\t// Add three color stops\n\tgradient.addColorStop(.25 + Math.sin(frameCount * .003) * .25, \"cyan\");\n\tgradient.addColorStop(.5 + Math.sin(frameCount * .0035) * .25, \"magenta\");\n\tgradient.addColorStop(.75 + Math.sin(frameCount * .0038) * .25, \"yellow\");\n\n\tctx.fillStyle = gradient;\n\tctx.fillRect(0, 0, width, height);\n\n\tctx.shadowBlur = 25;\n\tctx.shadowColor = \"black\";\n\n\t// ctx.fillStyle = 'white'\n\tctx.font = \"100px serif\";\n\tctx.textAlign = \"center\";\n\tctx.fillText(frameCount, width / 2, 100);\n\tctx.font = \"30px serif\";\n\tctx.fillText(`${mouseX} x ${mouseY}`, width / 2, 140);\n\n\t// keep cycle going\n\tframeCount++\n\twindow.requestAnimationFrame(draw);\n}"
            }
          ]
        },
        {
          "name": "_audio",
          "mod": "1588035882416",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_audio_analysis",
              "mod": "1730910127552",
              "type": "sketch",
              "code": "/*\t\n\t_audio_analysis // cc teddavis.org 2019-24\n\t\n\trevamp of P5LIVE's Audio snippet, now built-in the background!\n\tadd snippet to other sketches: CTRL + SHIFT + A \n*/\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\n\t// audio stuff now behind the scenes, 'true' makes class vars global\n\tsetupAudio(true) // if empty, use 'a5.' before audio vars below\n\t// a5.ease = .075 // customize ease speed\n}\n\nfunction draw() {\n\t/* audio vars: amp, ampL, ampR, ampEase, fft, fftEase, waveform, waveformEase */\n\tupdateAudio()\n\n\tbackground(0)\n\tnoFill()\n\tstroke(255)\n\ttextAlign(CENTER, CENTER)\n\n\t/* average */\n\ttext(\"MIX\", width * .5, height / 4)\n\tellipse(width / 2, height / 4, amp)\n\ttext(\"L\", width * .25, height / 4)\n\tellipse(width * .25, height / 4, ampL)\n\ttext(\"R\", width * .75, height / 4)\n\tellipse(width * .75, height / 4, ampR)\n\n\t/* waveform */\n\tbeginShape()\n\tfor(let i = 0; i < waveform.length; i++) {\n\t\tlet freq = waveform[i] * height / 4 // (-1, 1)\n\t\tlet x = map(i, 0, waveform.length, 0, width)\n\t\tcurveVertex(x, height * .5 + freq)\n\t}\n\tendShape()\n\n\t/* waveformEase */\n\tbeginShape()\n\tfor(let i = 0; i < waveformEase.length; i++) {\n\t\tlet freq = waveformEase[i] * height / 4 // (-1, 1)\n\t\tlet x = map(i, 0, waveformEase.length, 0, width)\n\t\tcurveVertex(x, height * .5 + freq)\n\t}\n\tendShape()\n\n\t/* fft */\n\tfor(let i = 0; i < fft.length; i++) {\n\t\tlet freq = fft[i]; // (0, 255)\n\t\tlet x = map(i, 0, fft.length, 0, width)\n\t\tlet w = width / fft.length\n\t\trect(x, height * .8, w, -freq)\n\t}\n\n\t/* fftEase */\n\tfor(let i = 0; i < fftEase.length; i++) {\n\t\tlet freq = fftEase[i]; // (0, 255)\n\t\tlet x = map(i, 0, fftEase.length, 0, width)\n\t\tlet w = width / fftEase.length\n\t\trect(x, height * .805, w, freq)\n\t}\n}"
            },
            {
              "name": "_audio_gen_tonejs",
              "mod": "1731030896101",
              "type": "sketch",
              "code": "/*\n\t_audio_gen_tonejs // cc teddavis.org 2021-24\n\t\n\tadd '// no p5sound' anywhere in sketch,\n\tto exclude p5.sound from loading (ie. for tone.js)\n\t* need to compile once to allow 'userGesture'\n\t\n\t(O) toggle jacks to set arrangement\n*/\n\n\n// no p5sound\nlet libs = [\"https://unpkg.com/tone\", \"includes/libs/Tone.js\"]\nlet synth // tone.js instance\n\nlet counter = 0,\n\ttempo = 10,\n\tnotesCount = 6,\n\tnotes = [], noteState = false,\n\tfont, bounds\n\nfunction preload() {\n\tfont = loadFont(\"includes/demos-data/fonts/RobotoMono-Regular.otf\")\n}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\n\t// tone.js synth\n\t// synth = new Tone.FMSynth().toDestination();\n\n\t// tone.js sampler\n\tsynth = new Tone.Sampler({\n\t\turls: {\n\t\t\t\"C1\": \"includes/demos-data/audio/pluck.mp3\" // p5.js assets\n\t\t},\n\t\trelease: 1,\n\t}).toDestination();\n\n\t// setup type\n\tgenType('P5LIVE', width / 5)\n}\n\nfunction draw() {\n\tbackground(0, 10)\n\n\t// playback head\n\tstroke(255)\n\tstrokeWeight(2)\n\tcounter += 16//noise(frameCount * .05) * 20\n\tlet pos = counter % width\n\tline(pos, 0, pos, height)\n\n\ttranslate(width / 2, height / 2)\n\n\t// notes\n\tfor(let n of notes) {\n\t\tif(mouseIsPressed){\n\t\t\tif(dist(mouseX, mouseY, n.x + width / 2, n.y + height / 2) < 10) {\n\t\t\t\tn.play = noteState\n\t\t\t}\n\t\t}\n\t\tnoFill()\n\t\tstroke(255)\n\t\tstrokeWeight(.5)\n\t\tif(n.play) {\n\t\t\tstrokeWeight(3)\n\t\t\tstroke(50, 255, 0)\n\t\t\t\n\t\t\t// play note logic\n\t\t\tif(abs((n.x + width / 2) - pos) < tempo && !n.playing) {\n\t\t\t\tn.playing = true\n\t\t\t\tlet pitch = ceil(map(n.y, -bounds.h / 2, bounds.h / 2, 120, 40)/ 12) * 12\n\t\t\t\tsynth.triggerAttackRelease(pitch, .3);\n\t\t\t\tfill(255)\n\t\t\t} else {\n\t\t\t\tn.playing = false\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tcircle(n.x, n.y, 20)\n\t}\n\n\n\t// patch cable\n\tnoFill()\n\tstroke(255)\n\tstrokeWeight(4)\n\tlet init = true,\n\t\tlastNode = null\n\tbeginShape()\n\tfor(let n of notes) {\n\t\tif(n.play) {\n\t\t\tif(init) {\n\t\t\t\tcurveVertex(n.x, n.y)\n\t\t\t\tinit = false\n\t\t\t}\n\t\t\tcurveVertex(n.x, n.y)\n\t\t\tlastNode = createVector(n.x, n.y)\n\t\t}\n\t}\n\tif(lastNode !== null) {\n\t\tcurveVertex(lastNode.x, lastNode.y)\n\t}\n\tendShape()\n}\n\nfunction mousePressed() {\n\tfor(let n of notes) {\n\t\tif(dist(mouseX, mouseY, n.x + width / 2, n.y + height / 2) < 10) {\n\t\t\tn.play = !n.play\n\t\t\tnoteState = n.play\n\t\t}\n\t}\n}\n\nfunction keyPressed() {\n\t// genType(key, width / 4)\n\tif(key == 'r'){\n\t\tgenNotes()\n\t}\n}\n\nfunction genType(txtString, txtSize) {\n\t// grab bounding box of text\n\tbounds = font.textBounds(txtString, 0, 0, txtSize)\n\n\t// textToPoints(txt, x, y, size, options)\n\tnotes = font.textToPoints(txtString, -bounds.w / 2, bounds.h / 2, txtSize, {\n\t\tsampleFactor: .02\n\t})\n\n\tgenNotes()\n}\n\nfunction genNotes(){\n\t// set play logic\n\tfor(let n of notes) {\n\t\tn.play = false\n\t\tn.playing = false\n\t\tif(random(1) > .95) {\n\t\t\tn.play = true\n\t\t}\n\t}\n}"
            }
          ]
        },
        {
          "name": "_math",
          "mod": "1588034695833",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_math_lissajousOrb",
              "mod": "1712882122246",
              "type": "sketch",
              "code": "/*\t_math_lissajousOrb // cc teddavis.org 2020\t*/\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tbackground(0)\n}\n\nfunction draw() {\n\n\tlet xSpeed = 2.1 // rate of left-right\n\tlet ySpeed = 1 // rate of up-down\n\tlet sSpeed = 10 // rate of ellipse\n\n\tfill(255)\n\tstroke(255)\n\tif(frameCount % 2 === 0) {\n\t\tstroke(0)\n\t}\n\tstrokeWeight(5)\n\n\tlet oscX = sin(frameCount * 0.01 * xSpeed) * height * .4\n\tlet oscY = cos(frameCount * 0.01 * ySpeed) * height * .4\n\tlet s = sin(frameCount * 0.01 * sSpeed) * 150\n\n\ttranslate(width / 2, height / 2)\n\tellipse(oscX, oscY, s, s)\n}"
            },
            {
              "name": "_math_sinStrings",
              "mod": "1712882123461",
              "type": "sketch",
              "code": "/*\t_math_sinStrings // cc teddavis.org 2019\t*/\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tmouseX = width * 0.4\n}\n\nfunction draw() {\n\tbackground(0)\n\tlet lc = 20\n\tfill(255)\n\tfor(let i = 0; i < lc; i++) {\n\t\tlet s = width / lc\n\t\tlet x = map(i, 0, lc - 1, 0, width)\n\t\tlet osc = sin((frameCount * .01) + i * map(mouseX, 0, width, 0, 5))\n\t\tlet y = height / 2 + osc * abs(mouseY - height / 2)\n\t\tstroke(255)\n\t\tstrokeWeight(3.1 - (osc * 3))\n\t\tline(x, y, x, 0)\n\t\tnoStroke()\n\t\tellipse(x, y, s, s)\n\t}\n}"
            },
            {
              "name": "_math_noisyWorm",
              "mod": "1712882125734",
              "type": "sketch",
              "code": "/*\t_math_noisyWorm // cc teddavis.org 2019\t*/\n\nlet x, y, s\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tnoCursor()\n\tbackground(0)\n}\n\nfunction draw() {\n\tx = noise(frameCount * .002) * width\n\ty = noise(frameCount * .003) * height\n\ts = noise(frameCount * .02) * 100\n\n\tellipse(x, y, s)\n}\n\nfunction keyPressed() {\n\tif(keyCode == 8)\n\t\tbackground(0)\n}"
            },
            {
              "name": "_math_ease",
              "mod": "1712882127534",
              "type": "sketch",
              "code": "/* \n\t_math_ease // cc teddavis.org 2019\n\tP5LIVE built-in ease() function for smoothing values:\n\toutVariable = ease(inVal, outVariable, easeVal)\n*/\n\nlet x = 0,\n\ty = 0,\n\te = .05, // easing amount (smaller = slower)\n\ts = 150\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n}\n\nfunction draw() {\n\tbackground(0, e * 255)\n\n\tx = ease(mouseX, x, e)\n\ty = ease(mouseY, y, e)\n\tcircle(x, y, s)\n\n\tdebugMouse()\n}\n\nfunction debugMouse() {\n\tlet msg = \"direct:\\nx: \" + nf(mouseX, 3, 1) + \" / y: \" + nf(mouseY, 3, 1)\n\tmsg += \"\\n\\nease:\\nx: \" + nf(x, 3, 1) + \" / y: \" + nf(y, 3, 1)\n\tpush()\n\tfill(100)\n\ttext(msg, x - s / 3, y - s / 5)\n\tpop()\n}"
            }
          ]
        },
        {
          "name": "_webgl",
          "mod": "1588034539534",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_webgl_primatives",
              "mod": "1712882101865",
              "type": "sketch",
              "code": "/*\t_webgl_primatives // cc teddavis.org 2019\t*/\n\nlet v = .3\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tangleMode(DEGREES)\n}\n\nfunction draw() {\n\tbackground(0)\n\torbitControl(5)\n\n\tortho()\n\n\tif(mouseIsPressed) {\n\t\tlights()\n\t\tnoStroke()\n\t\tfill(255)\n\t} else {\n\t\tstroke(255)\n\t\tnoFill()\n\t}\n\n\n\tpush()\n\ttranslate(rPos(0))\n\trotateX(frameCount / 4)\n\trotateZ(frameCount / 2)\n\tplane(150, 150)\n\tpop()\n\n\tpush()\n\ttranslate(rPos(50))\n\trotateX(frameCount / 4)\n\trotateZ(frameCount / 2)\n\tbox(150)\n\tpop()\n\n\tpush()\n\ttranslate(rPos(100))\n\trotateX(frameCount / 4)\n\trotateY(frameCount / 4)\n\tsphere(100)\n\tpop()\n\n\tpush()\n\ttranslate(rPos(150))\n\trotateX(frameCount / 4)\n\trotateY(frameCount / 4)\n\tellipsoid(100, 30)\n\tpop()\n\n\tpush()\n\ttranslate(rPos(200))\n\trotateY(frameCount / 2)\n\trotateX(frameCount / 3)\n\tcone(100, 150)\n\tpop()\n\n\tpush()\n\ttranslate(rPos(250))\n\trotateX(frameCount / 4)\n\trotateZ(frameCount / 3)\n\ttorus(100, 50)\n\tpop()\n\n\tpush()\n\ttranslate(rPos(300))\n\trotateY(frameCount / 2)\n\trotateZ(frameCount / 4)\n\tcylinder(100, 100)\n\tpop()\n}\n\nfunction rPos(off) {\n\tlet x = (sin(off + frameCount * v) * width / 3)\n\tlet y = (cos(off + frameCount * v) * height / 3)\n\treturn createVector(x, y)\n}"
            },
            {
              "name": "_webgl_obj",
              "mod": "1712882106265",
              "type": "sketch",
              "code": "/*\t_webgl_obj // cc teddavis.org 2020\t*/\n\nlet obj\n\nfunction preload() {\n\tobj = loadModel('includes/demos-data/3d/teapot.obj')\n}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tnoFill()\n}\n\nfunction draw() {\n\tbackground(0)\n\torbitControl(5)\n\trotateY(radians(-frameCount / 2))\n\tstroke(0, 255, 0)\n\tscale(-4)\n\tmodel(obj)\n}"
            },
            {
              "name": "_webgl_objVertices",
              "mod": "1712882110622",
              "type": "sketch",
              "code": "/*\t_webgl_objVertices // cc teddavis.org 2020\t*/\n\nlet obj, geom\n\nfunction preload() {\n\tobj = loadModel('includes/demos-data/3d/teapot.obj')\n}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tgeom = obj.computeFaces() // grab model geometry\n\t// console.log(geom)\n}\n\nfunction draw() {\n\tbackground(0)\n\torbitControl(5)\n\trotateY(radians(-frameCount / 2))\n\tstroke(0, 255, 0)\n\n\tscale(-4)\n\tfor(let i = 0; i < geom.vertices.length; i++) {\n\t\tlet v = geom.vertices[i]\n\t\tlet off = sin(i * 0.1 + frameCount * 0.05) * 2\n\n\t\tstrokeWeight(off * 10)\n\t\tpoint(v.x, v.y + off, v.z)\n\t}\n}"
            },
            {
              "name": "_webgl_sphereBox",
              "mod": "1712882113790",
              "type": "sketch",
              "code": "/*\t_webgl_sphereBox // cc teddavis.org 2019\t*/\n\nlet lc = 8\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tnoCursor()\n\tnoStroke()\n}\n\nfunction draw() {\n\tortho()\n\tbackground(0)\n\tfor(let i = 0; i < lc; i++) {\n\t\tfor(let j = 0; j < lc; j++) {\n\t\t\tlet mx = map(i, 0, lc - 1, -width / 2, width / 2)\n\t\t\tlet my = map(j, 0, lc - 1, -height / 2, height / 2)\n\n\t\t\tboxsphere(mx, my)\n\t\t}\n\t}\n}\n\nfunction boxsphere(x, y) {\n\tpush()\n\ttranslate(x, y)\n\tlet mmx = map(mouseX, 0, width, -width / 2, width / 2)\n\tlet mmy = map(mouseY, 0, height, -height / 2, height / 2)\n\tlet roff = -dist(mmx, mmy, x, y) / 2\n\trotateY(radians(frameCount + mouseX))\n\trotateX(radians(mouseY))\n\tlet s = (width / lc / 2) + roff\n\n\tfill(255)\n\tif(mouseIsPressed) {\n\t\tfill(0)\n\t}\n\tbox(s)\n\n\tfill(0)\n\tif(mouseIsPressed) {\n\t\tfill(255)\n\t}\n\tsphere(s * 0.65)\n\tpop()\n}"
            }
          ]
        },
        {
          "name": "_typo",
          "mod": "1588034463847",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_typo_textToPoints-circle",
              "mod": "1693699216565",
              "type": "sketch",
              "code": "/*\t_typo_textToPoints-circle // cc teddavis.org 2020\t*/\n\nlet font, points\n\nfunction preload() {\n\tfont = loadFont(\"includes/demos-data/fonts/RobotoMono-Regular.otf\")\n}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tnoFill()\n\tstroke(255)\n\tstrokeWeight(1)\n\n\tgenType('P5LIVE', width / 4)\n}\n\nfunction draw() {\n\tbackground(0)\n\ttranslate(width / 2, height / 2)\n\n\tfor(let i = 0; i < points.length; i++) {\n\t\tlet p = points[i]\n\t\tlet s = mouseY / 10 + sin(i * .25 + frameCount * .05) * 20\n\t\tcircle(p.x, p.y, s)\n\t}\n}\n\nfunction keyPressed() {\n\tgenType(key, height / 2)\n}\n\nfunction genType(txtString, txtSize) {\n\t// grab bounding box of text\n\tlet bounds = font.textBounds(txtString, 0, 0, txtSize)\n\n\t// textToPoints(txt, x, y, size, options)\n\tpoints = font.textToPoints(txtString, -bounds.w / 2, bounds.h / 2, txtSize, {\n\t\tsampleFactor: .07,\n\t\tsimplifyThreshold: 0\n\t})\n}"
            },
            {
              "name": "_typo_textToPoints-lines",
              "mod": "1693699220326",
              "type": "sketch",
              "code": "/*\t_typo_textToPoints-lines // cc teddavis.org 2020\t*/\n\nlet font, points\n\nfunction preload() {\n\tfont = loadFont(\"includes/demos-data/fonts/RobotoMono-Regular.otf\")\n}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tnoFill()\n\tstroke(255)\n\tstrokeWeight(1)\n\n\tgenType('P5LIVE', width / 4)\n}\n\nfunction draw() {\n\tbackground(0)\n\ttranslate(width / 2, height / 2)\n\n\tbeginShape(LINES);\n\tfor(let i = 0; i < points.length; i++) {\n\t\tlet p = points[i]\n\t\tlet xScl = sin(i * .031 + frameCount * .021) * sin(frameCount * .01) * map(mouseX, 0, width, .01, .5)\n\t\tlet yScl = sin(i * .039 + frameCount * .04) * sin(frameCount * .002) * map(mouseY, 0, height, .01, .5)\n\t\tlet x = map(p.x, width * xScl, width * (1 + xScl), 0, width)\n\t\tlet y = map(p.y, height * yScl, height * (yScl + 1), 0, height)\n\t\tvertex(x, y)\n\t\tvertex(p.x, p.y)\n\t}\n\tendShape()\n}\n\nfunction keyPressed() {\n\tgenType(key, height / 2)\n}\n\nfunction genType(txtString, txtSize) {\n\t// grab bounding box of text\n\tlet bounds = font.textBounds(txtString, 0, 0, txtSize)\n\n\t// textToPoints(txt, x, y, size, options)\n\tpoints = font.textToPoints(txtString, -bounds.w / 2, bounds.h / 2, txtSize, {\n\t\tsampleFactor: .07,\n\t\tsimplifyThreshold: 0\n\t})\n}"
            },
            {
              "name": "_typo_opentype",
              "mod": "1693699223697",
              "type": "sketch",
              "code": "/*\t\n\t_typo_opentype // cc teddavis.org 2021\t\n\tisolated glyphs + opentype.js features\n*/\n\nlet libs = ['https://cdn.jsdelivr.net/npm/opentype.js@latest/dist/opentype.min.js']\n\nlet fontPath = 'includes/demos-data/fonts/RobotoMono-Regular.otf'\nlet path\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tnoFill()\n\n\tgenOpenType('P5LIVE', width / 4)\n}\n\nfunction draw() {\n\tbackground(0, 5)\n\ttranslate(width / 2, height / 2)\n\n\tlet osc = sin(frameCount * .01) * 15\n\n\t// cycle path if ready\n\tif(path) {\n\t\tlet c = 0\n\t\tfor(let cmd of path.commands) {\n\t\t\tif(cmd.type === 'M') {\n\t\t\t\t// start of each glyph\n\t\t\t\tpush()\n\t\t\t\trotate(radians(osc))\n\t\t\t\tbeginShape()\n\t\t\t\tvertex(cmd.x, cmd.y)\n\t\t\t} else if(cmd.type === 'L') {\n\t\t\t\tvertex(cmd.x, cmd.y)\n\t\t\t} else if(cmd.type === 'C') {\n\t\t\t\tbezierVertex(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y)\n\t\t\t} else if(cmd.type === 'Q') {\n\t\t\t\tquadraticVertex(cmd.x1, cmd.y1, cmd.x, cmd.y)\n\t\t\t} else if(cmd.type === 'Z') {\n\t\t\t\t// end of each glyph\n\t\t\t\tstroke((c * 5 + frameCount) % 255);\n\t\t\t\tendShape(CLOSE)\n\t\t\t\tpop()\n\t\t\t}\n\t\t\tc++\n\t\t}\n\t}\n}\n\nfunction genOpenType(txtString, txtSize) {\n\topentype.load(fontPath, function(err, f) {\n\t\tif(err) {\n\t\t\tprint('Error loading font: ' + err)\n\t\t} else {\n\t\t\t// grab once for measuring\n\t\t\tpath = f.getPath(txtString, 0, 0, txtSize)\n\t\t\tlet bounds = path.getBoundingBox()\n\t\t\t\n\t\t\t// reposition to 0, 0 as center (for WEBGL, rotate, etc)\n\t\t\tpath = f.getPath(txtString, -(bounds.x2 - bounds.x1) / 2, (bounds.y2 - bounds.y1) / 2, txtSize)\n\t\t}\n\t})\n}"
            },
            {
              "name": "_typo_google-fonts",
              "mod": "1698196308448",
              "type": "sketch",
              "code": "/*\t_typo_google-fonts // cc teddavis.org 2021\t*/\n\nlet font = googleFont('Codystar')\nlet txt = 'P5LIVE'\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\ttextFont(font)\n\ttextAlign(CENTER, CENTER)\n\tfill(255)\n}\n\nfunction draw() {\n\tbackground(0, 10)\n\ttextSize(random(1, 100))\n\ttext(txt, random(width), random(height))\n}\n\nfunction keyPressed() {\n\ttxt = key // overwrite on keypress\n}\n\nfunction googleFont(fontName) {\n\tlet link = document.createElement(\"link\")\n\tlink.href = \"https://fonts.googleapis.com/css?family=\" + encodeURI(fontName) + '&display=swap'\n\tlink.rel = \"stylesheet\"\n\tdocument.head.appendChild(link)\n\treturn fontName\n}"
            }
          ]
        },
        {
          "name": "_gui",
          "mod": "1588034496007",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_gui_slidersGrid",
              "mod": "1712882080981",
              "type": "sketch",
              "code": "/*\t_gui_slidersGrid // cc teddavis.org 2019/23 */\n/*\t!*!*! hide editor to adjust sliders\t*/\n\nlet border, grid = 40\nlet guiHolder, sGrid, sModular, sSize, sSpeed, sSizeSpeed, cbSize\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tnoStroke()\n\tborder = grid / 2\n\tbuildGUI()\n}\n\nfunction draw() {\n\tbackground(0)\n\n\tgrid = sGrid.value()\n\tborder = grid / 2\n\n\tlet c = 0;\n\tfor(let i = 0; i < width; i += grid) {\n\t\tfor(let j = 0; j < height; j += grid) {\n\t\t\tfill(abs(sin(frameCount * sSpeed.value() * .001 + c * sModular.value())) * 255)\n\t\t\tlet s = grid\n\t\t\tif(cbSize.checked()) {\n\t\t\t\ts = sin(c * sSpeed.value() / sSizeSpeed.value() + frameCount * sSpeed.value() * .001) * grid\n\t\t\t}\n\t\t\tellipse(border + i, border + j, s)\n\t\t\tc++\n\t\t}\n\t}\n}\n\nfunction buildGUI() {\n\tguiHolder = createDiv('')\n\t\t.position(width / 2, 15)\n\t\t.class('gui')\n\t\t\n\tguiBar = createDiv('GUI PANEL').class('guibar').parent(guiHolder).draggable(guiHolder).doubleClicked(()=>{guiContent.toggleClass('hidden')})\n\n\tguiContent = createDiv('').class('guicontent').parent(guiHolder)\n\t\n\tcreateDiv('GRID').class('label').parent(guiContent)\n\tsGrid = createSlider(20, 100, grid)\n\t\t.parent(guiContent)\n\n\tcreateDiv('SPEED').class('label').parent(guiContent)\n\tsSpeed = createSlider(2, 100, 10)\n\t\t.parent(guiContent)\n\n\tcreateDiv('MODULATE').class('label').parent(guiContent)\n\tsModular = createSlider(0, 100, 11)\n\t\t.parent(guiContent)\n\n\tcreateDiv('SIZE OFFSET').class('label').parent(guiContent)\n\tsSizeSpeed = createSlider(1, 4000, 100)\n\t\t.style('float', 'left')\n\t\t.parent(guiContent)\n\n\tcbSize = createCheckbox('', false)\n\t\t.parent(guiContent)\n\n\t// dynamic CSS\n\tcreateElement('style', `\n\t\t.gui{\n\t\t\twidth:175px;\n\t\t\tbackground:rgba(0, 0, 0, .5);\n\t\t\tborder:1px solid #fff;\n\t\t\tborder-radius:15px;\n\t\t\tuser-select: none;\n\t\t}\n\t\t.guicontent{\n\t\t\tborder-top:1px solid #fff;\n\t\t\tpadding:10px;\n\t\t}\n\t\t.guitoggle{\n\t\t\tfloat:right;\n\t\t}\n\t\t.guibar{\n\t\t\ttext-align:center;\n\t\t\tpadding:5px;\n\t\t\tbackground:rgba(255, 255, 255, .25)\n\t\t}\n\t\t.label, .guibar{\n\t\t\tcolor:#fff;\n\t\t\tfont-family:sans-serif;\n\t\t}\n\t\t.hidden{\n\t\t\tdisplay:none;\n\t\t}\n\t`)\n}"
            }
          ]
        },
        {
          "name": "_libs",
          "mod": "1588875982653",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_libs_p5.glitch",
              "mod": "1712791977377",
              "type": "sketch",
              "code": "/*\t_libs_p5.glitch // cc teddavis.org 2020\n\tvisit https://p5.glitch.me to learn more\n*/\n\n// line below is how to add custom libs\nlet libs = [\"includes/libs/p5.glitch.js\"]\n\nlet glitch, capture, w = 320,\n\th = 240\n\nfunction setup() {\n\tcapture = createCapture(VIDEO)\n\tcapture.size(w, h)\n\tcapture.hide()\n\n\tcreateCanvas(windowWidth, windowHeight)\n\n\tbackground(0)\n\timageMode(CENTER)\n\n\tglitch = new Glitch(this)\n\tglitch.pixelate(1)\n}\n\nfunction draw() {\n\tif(frameCount % 3 === 0) {\n\n\t\tif(!mouseIsPressed) {\n\t\t\tglitch.loadImage(capture)\n\t\t}\n\n\t\t// map mouseX to # of randomBytes() + mouseY to limitBytes()\n\t\tglitch.limitBytes(map(mouseY, 0, height, 0, 1))\n\t\tglitch.randomBytes(map(mouseX, 0, width, 0, 100))\n\t\tglitch.buildImage()\n\t}\n\n\timage(glitch.image, width / 2, height / 2, glitch.width, glitch.height)\n}"
            },
            {
              "name": "_libs_voronoi",
              "mod": "1712882073987",
              "type": "sketch",
              "code": "/*\t_libs_voronoi // cc teddavis.org 2020 */\n\n// add as many libs as wanted into the array\nlet libs = [\n\t'https://cdn.jsdelivr.net/npm/voronoi@1.0.0/rhill-voronoi-core.js' // remote\n\t, 'includes/libs/rhill-voronoi-core.js' // load locally (if offline)\n\t, 'includes/demos-data/js/voronoi-p5live.js'\n]\n\nlet bbox, voronoi\nlet sites = [],\n\tedges = []\nlet initTypo = true\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tbbox = {\n\t\txl: 0,\n\t\txr: width,\n\t\tyt: 0,\n\t\tyb: height\n\t}\n\tvoronoi = new Voronoi()\n\n\t// pre-loading custom points from 'voronoi-p5live.js'\n\ttypoPoints()\n\n\tstroke(255)\n\tstrokeWeight(2)\n\n}\n\nfunction draw() {\n\tbackground(0)\n\n\tif(mouseIsPressed) {\n\t\tif(initTypo) {\n\t\t\tsites = []\n\t\t\tinitTypo = false\n\t\t}\n\t\taddPoints(mouseX, mouseY)\n\t}\n\n\tbeginShape(LINES)\n\tfor(var i = 0; i < edges.length; i++) {\n\t\tlet edge = edges[i]\n\t\tvertex(edge.va.x, edge.va.y)\n\t\tvertex(edge.vb.x, edge.vb.y)\n\t}\n\tendShape()\n}\n\nfunction addPoints(x, y) {\n\tsites.push({\n\t\tx: x,\n\t\ty: y\n\t})\n\tresult = voronoi.compute(sites, bbox)\n\tedges = result.edges\n}\n\n// custom preloaded points interpreter\nfunction typoPoints() {\n\tfor(let t of p5typo) {\n\t\tsites.push({\n\t\t\tx: t.x * width,\n\t\t\ty: t.y * height + height / 5\n\t\t})\n\t}\n\tresult = voronoi.compute(sites, bbox)\n\tedges = result.edges\n}"
            },
            {
              "name": "_libs_sans_p5",
              "mod": "1712882074972",
              "type": "sketch",
              "code": "/*\t_libs_sans_p5 // cc teddavis.org 2023\n\tuse for older/newer/custom versions of p5.js\n\tOR load completely different frameworks for __LIVE?!\n\t\n\tUSAGE\n\t- writting '// no p5' in your code will stop loading p5.js + p5.sound.js libs\n*/\n\n// no p5\n\nlet libs = [\n\t'https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.6.0/p5.min.js',\n\t'https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.6.0/addons/p5.sound.min.js'\n\t]\n\nnew p5(); // manually init p5\n\nfunction setup(){\n\tcreateCanvas(windowWidth, windowHeight)\n\tprint(p5.VERSION)\n}\n\nfunction draw(){\n\tcircle(mouseX, mouseY, 150)\n}"
            }
          ]
        },
        {
          "name": "_input",
          "mod": "1588033538041",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_input_webcam",
              "mod": "1709041058907",
              "type": "sketch",
              "code": "/*\t_input_webcam // cc teddavis.org 2020\t*/\n\n\nlet capture, scl = 1,\n\trot = 0\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tcapture = createCapture(VIDEO)\n\tcapture.size(320, 240)\n\tcapture.hide() // hide raw camera\n\timageMode(CENTER)\n}\n\nfunction draw() {\n\tif(mouseIsPressed) {\n\t\tscl += (mouseY - pmouseY) / 100\n\t\trot += mouseX - pmouseX\n\t}\n\n\tpush()\n\ttranslate(mouseX, mouseY)\n\trotate(radians(rot))\n\timage(capture, 0, 0, capture.width * scl, capture.height * scl)\n\tpop()\n}"
            },
            {
              "name": "_input_webcamSynth",
              "mod": "1693697554258",
              "type": "sketch",
              "code": "/*\t_input_webcamSynth // cc teddavis.org 2020\t*/\n\n\nlet capture, thresholdAmount, scl,\n\tmx, my, ex, ey, easing = .03\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tcapture = createCapture(VIDEO)\n\tcapture.size(320, 240)\n\tcapture.hide() // hide raw camera\n\tnoSmooth()\n\timageMode(CENTER)\n\tmx = 100\n\tmy = 50\n\tex = my\n\tey = mx\n\tscl = width / capture.width\n\tthresholdAmount = 127\n}\n\nfunction draw() {\n\tbackground(0, ey * .1)\n\n\tprocessMouse()\n\tprocessCamera()\n\n\timage(capture, width / 2, height / 2, capture.width * scl, capture.height * scl)\n}\n\nfunction processMouse() {\n\tif(mouseIsPressed) {\n\t\tmx = map(mouseX, 0, width, 0, 255)\n\t\tmy = map(mouseY, 0, height, 0, 255)\n\t}\n\tex = ease(mx, ex, easing)\n\tey = ease(my, ey, easing)\n\n\tscl = ey / 10\n\tthresholdAmount = ex\n\n}\n\nfunction processCamera() {\n\tcapture.loadPixels()\n\tif(capture.pixels.length > 0) {\n\t\tlet pixels = capture.pixels\n\n\t\tlet i = 0;\n\t\tfor(var y = 0; y < capture.height; y++) {\n\t\t\tfor(let x = 0; x < capture.width; x++) {\n\t\t\t\tlet redValue = pixels[i]\n\t\t\t\tlet outputValue = 0\n\t\t\t\tif(redValue >= thresholdAmount) {\n\t\t\t\t\toutputValue = 255\n\t\t\t\t}\n\n\t\t\t\tpixels[i++] = abs(sin(frameCount * .0012)) * mouseX % 255\n\t\t\t\tpixels[i++] = abs(sin(frameCount * .003)) * ex % outputValue\n\t\t\t\tpixels[i++] = abs(sin(frameCount * .0021)) * mouseY % 255\n\t\t\t\tpixels[i++] = outputValue;\n\n\t\t\t\tpixels[i++] = 255\n\t\t\t\tpixels[i++] = 255\n\t\t\t}\n\t\t}\n\t}\n\tcapture.updatePixels()\n}"
            },
            {
              "name": "_input_midi",
              "mod": "1731680082696",
              "type": "sketch",
              "code": "/*\n\t_input_midi v3 // cc teddavis.org 2021 - 2024\n\t\n\trevamp of P5LIVE's MIDI, now built-in the background!\n\tonly need to use setupMidi(in, out, global) + updateMidi() for quick use\n\tsee _input_midi_custom for overriding MIDI event functions\n\tvarible structure:\n\t\t- note // latest note {on, channel, number, velocity, velocityEase, sum}\n\t\t- cc // latest controlchange {channel, number, value}\n\t\t- notes[] // array of 128 notes (regardless of channel)\n\t\t- ccs[] // array of 128 controlchanges (regardless of channel)\n\t\t- channels[] // array of 16 channels {id, channel, notes, ccs}\n\t\t\t.note // latest note on channel\n\t\t\t.cc // latest controlchange on channel\n\t\t\t.notes[] // array of 128 notes (per that channel) {*same as above*}\n\t\t\t.ccs[] // array of 128 controlchanges (per that channel) {*same as above*}\n*/\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\n\t// setup MIDI in/out by ID # or \"name\" (see console.log)\n\tsetupMidi(0, 0, true) // in, out, globalvars (if false, use midi5. for all vars )\n\t// midi5.debug = ['note', 'controlchange'] // send to console\n}\n\nfunction draw() {\n\tupdateMidi()\n\n\tbackground(0, 150)\n\trectMode(CENTER)\n\tnoStroke()\n\n\ttranslate(width / 2, height / 2)\n\n\t// latest single note\n\tfill(255, note.vel * 2)\n\tcircle(0, 0, 150 + note.velEase * 2)\n\n\t// latest controlchange (cc)\n\tpush()\n\tfill(255)\n\trotate(map(cc.value, 0, 127, 0, TWO_PI))\n\trect(0, 0, height / 2, 1)\n\tpop()\n\n\n\t// channels[] is an array of 16 channels\n\tfor(let ch of channels) {\n\t\tlet y = map(ch.channel, 1, 16, -height / 3, height / 3)\n\t\tstroke(255, ch.note.velEase)\n\t\tline(-width / 2, y, width / 2, y)\n\t\tfill(cc.value * 2, ch.note.velEase)\n\t\ttext(ch.channel, -width / 2 + 10, y - 5)\n\t}\n\tnoStroke()\n\n\n\t// notes[] is an array of 128 values\n\tfor(let n of notes) {\n\t\t// if(n.on)\n\t\tfill(255, n.vel * 2)\n\t\tlet x = map(n.number, 0, 127, -width / 3, width / 3)\n\t\tlet y = map(n.channel, 1, 16, -height / 3, height / 3)\n\t\trect(x, y, width / 127, map(n.velEase % 127, 0, 127, 0, height / 8))\n\t}\n\n\t// ccs[] is an array of 128 values\n\tfor(let c of ccs) {\n\t\tlet x = map(c.number, 0, 127, -width / 2, width / 2)\n\t\tlet y = map(c.channel, 1, 16, -height / 3, height / 3)\n\t\tstroke(c.value * 2)\n\t\tnoFill()\n\t\tcircle(x, y, c.value)\n\t}\n}"
            },
            {
              "name": "_input_midi_custom",
              "mod": "1731680094647",
              "type": "sketch",
              "code": "/*\n\t_input_midi_custom // cc teddavis.org 2024\n\t\n\toverride the P5LIVE built-in MIDI parsing with your own functions.\n\t(disables P5LIVE MIDI arrays w/ channel, notes, ccs, etc)\n*/\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\n\t// setup MIDI in/out by ID # or \"name\" (see console.log)\n\tsetupMidi(0, 0) // in, out, globalvars = false\n\n\n\t// set custom functions\n\tmidi5.noteOn = (note) => {\n\t\t// print(note)\n\t\tfill(note.velocity)\n\t\tnoStroke()\n\t\tcircle(random(width), random(height), note.number * note.octave)\n\t}\n\n\tmidi5.noteOff = (note) => {\n\t\t// print(note)\n\t\tbackground(0, 55)\n\t}\n\n\tmidi5.controlChange = (cc) => {\n\t\tprint(cc)\n\t\tnoFill()\n\t\tstroke(255)\n\t\tcircle(width / 2, height / 2, map(cc.value, 0, 127, 0, height))\n\t}\n\n\tmidi5.pitchBend = (pb) => {\n\t\t// print(pb)\n\t}\n}\n\nfunction draw() {\n\n}"
            },
            {
              "name": "_input_osc",
              "mod": "1700694889422",
              "type": "sketch",
              "code": "/*\t\n\t_input_osc // cc teddavis.org 2019\n\t** Requires offline nodejs/npm installation of P5LIVE\n\t\n\tProcessing sketch to run at same time: \n\thttps://gist.github.com/ffd8/f9f33cc7461f8467f62d5a792dde53ca\n*/\n\nlet libs = [\"includes/js/socket.io.js\"]\nlet socket, debugIn, debugOut\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\ttextSize(20)\n\tsetupOsc('127.0.0.1', 12000, 12001) // oscHost, oscPortIn, oscPortOut\n\tsendOsc('/screenSize', [width, height]) // set Processing to p5 scale\n\n\t// optional debug\n\tdebugIn = createElement('textarea')\n\tdebugBox(debugIn, 'OSC Received', 10, 0, width / 3, 50)\n\tdebugOut = createElement('textarea')\n\tdebugBox(debugOut, 'OSC Sent', width / 3 + 50, 0, width / 3, 50)\n}\n\nfunction draw() {\n\tbackground(0, 10)\n\n}\n\nfunction mouseMoved() {\n\t// send p5.js coordinates\n\tsendOsc('/p5js', [mouseX, mouseY])\n}\n\nfunction mousePressed() {\n\t// clear Processing drawing on click\n\tsendOsc('/clear', \"\")\n\t// print(socket)\n}\n\n\n/* OSC COMMUNICATION */\nfunction receiveOsc(address, value) {\n\t// debug received message\n\t// print('in: ' + address + ', ' +value)\n\tif(debugIn) {\n\t\tdebugIn.value(address + ', ' + value)\n\t}\n\n\t// visualize message value\n\tlet x = map(address.substring(1), 0, 9, 0, width)\n\tellipse(x, height / 3, width / 10 * value)\n}\n\nfunction sendOsc(address, value) {\n\tif(socket != undefined) {\n\t\tsocket.emit('message', [address].concat(value))\n\t}\n\n\t// debug sent message\n\tif(debugOut) {\n\t\tdebugOut.value(address + ', ' + value)\n\t}\n}\n\nfunction setupOsc(oscHost, oscPortIn, oscPortOut) {\n\tsocket = io.connect('http://127.0.0.1:8082')\n\tsocket.on('connect', function() {\n\t\tsocket.emit('config', {\n\t\t\tserver: {\n\t\t\t\thost: oscHost,\n\t\t\t\tport: oscPortIn\n\t\t\t},\n\t\t\tclient: {\n\t\t\t\thost: oscHost,\n\t\t\t\tport: oscPortOut\n\t\t\t}\n\t\t})\n\t\tprint('OSC Ready!\\n' + oscHost + ', listen: ' + oscPortIn + ', send: ' + oscPortOut)\n\t})\n\tsocket.on('message', function(msg) {\n\t\treceiveOsc(msg[0], msg.splice(1))\n\t})\n}\n\nfunction debugBox(elm, label, x, y, w, h) {\n\tlet telm = createDiv(label).position(x, y)\n\ttelm.style('color', '#fff')\n\ttelm.style('font-family', 'monospace')\n\ttelm.style('padding', '5px')\n\telm.position(x, y + 20).size(w, h).value('')\n\telm.style('color', '#fff')\n\telm.style('background', 'none')\n\telm.style('border', '1px solid #fff')\n\telm.style('resize', 'none')\n\telm.style('padding', '5px')\n\telm.style('outline', 'none')\n}"
            }
          ]
        },
        {
          "name": "_hardware",
          "mod": "1588036223865",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_hardware_gamepad",
              "mod": "1713219679008",
              "type": "sketch",
              "code": "/*\n\t_hardware_gamepad // cc teddavis.org 2020\n\tdemo (for PSX) uses browser's built-in gamepad api\n*/\n\nlet gp, pos, dir, useBG = true,\n\tvel = 5,\n\tshapeMode = 0,\n\tsw = 1\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tpos = createVector(width / 2, height / 2, 50)\n\tdir = createVector(0, 0, 0)\n\trectMode(CENTER)\n\tnoFill()\n\tstroke(255)\n}\n\nfunction draw() {\n\tif(useBG) {\n\t\tbackground(0, 25)\n\t}\n\n\tgpUpdate()\n}\n\n// gamepad connected\nwindow.addEventListener(\"gamepadconnected\", function() {\n\tgp = navigator.getGamepads()[0]\n\tconsole.log(\"gamepad connected!\")\n\tconsole.log(gp)\n});\n\n// gamepad disconnected\nwindow.addEventListener(\"gamepaddisconnected\", function() {\n\tgp = undefined\n});\n\nfunction gpUpdate() {\n\n\t// draw forms\n\tstrokeWeight(sw)\n\tswitch (shapeMode) {\n\t\tcase 0:\n\t\t\trect(pos.x, pos.y, pos.z)\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tline(pos.x - pos.z / 2, pos.y - pos.z / 2, pos.x + pos.z / 2, pos.y + pos.z / 2)\n\t\t\tline(pos.x + pos.z / 2, pos.y - pos.z / 2, pos.x - pos.z / 2, pos.y + pos.z / 2)\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tellipse(pos.x, pos.y, pos.z)\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\ttriangle(pos.x, pos.y - pos.z / 2, pos.x + pos.z / 2, pos.y + pos.z / 2, pos.x - pos.z / 2, pos.y + pos.z / 2)\n\t\t\tbreak;\n\t}\n\n\t// receive axis + buttons presses\n\tif(gp !== undefined) {\n\t\tgp = navigator.getGamepads()[0]\n\n\t\t// buttons pressed\n\t\tfor(let i = 0; i < gp.buttons.length; i++) {\n\t\t\tif(gp.buttons[i].pressed) {\n\t\t\t\t//\tprint(i)\n\n\t\t\t\t// change shape based on button\n\t\t\t\tif(i < 4) {\n\t\t\t\t\tshapeMode = i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\n\t\t// horizontal dpad axis\n\t\tif(gp.axes[0] == 1 || gp.axes[0] == -1) {\n\t\t\tdir.x += gp.axes[0] / 10\n\t\t}\n\n\t\tpos.x += dir.x * vel;\n\t\tif(pos.x > width + pos.z / 2) {\n\t\t\tpos.x = -pos.z / 2\n\t\t} else if(pos.x < -pos.z / 2) {\n\t\t\tpos.x = width + pos.z / 2\n\t\t}\n\n\t\t// vertical dpad axis\n\t\tif(gp.axes[1] == 1 || gp.axes[1] == -1) {\n\t\t\tdir.y += gp.axes[1] / 10\n\t\t}\n\n\t\tpos.y += dir.y * vel\n\t\tif(pos.y > height + pos.z / 2) {\n\t\t\tpos.y = -pos.z / 2\n\t\t} else if(pos.y < -pos.z / 2) {\n\t\t\tpos.y = height + pos.z / 2\n\t\t}\n\n\t\t// shoulder buttons (R1/L1)\n\t\tif(gp.buttons[5].pressed) {\n\t\t\tpos.z += vel\n\t\t} else if(gp.buttons[4].pressed) {\n\t\t\tif(pos.z > 15) {\n\t\t\t\tpos.z -= vel\n\t\t\t}\n\t\t}\n\n\t\t// shoulder triggers (R2/L2)\n\t\tif(gp.buttons[7].pressed) {\n\t\t\tsw += 1\n\t\t} else if(gp.buttons[6].pressed) {\n\t\t\tif(sw > 1) {\n\t\t\t\tsw -= 1\n\t\t\t}\n\t\t}\n\n\t\t// start + select\n\t\tif(gp.buttons[9].pressed) {\n\t\t\tdir = createVector(0, 0, 0)\n\t\t} else if(gp.buttons[8].pressed) {\n\t\t\tuseBG = !useBG\n\t\t}\n\t}\n}"
            },
            {
              "name": "_hardware_serial",
              "mod": "1700691535700",
              "type": "sketch",
              "code": "/*\t\n\t_hardware_serial\n\t\n\trun the p5.serial App or Node.js server\n\thttps://github.com/p5-serial/p5.serialport\n\t\n\tBelow based on Basic Example\n\n*/\n\nlet libs = ['includes/libs/p5.serialport.js']\nlet serial\nlet serialPort = '/dev/cu.usbmodem1421' // adjust as needed\n\n// Methods available\n// serial.read() returns a single byte of data (first in the buffer)\n// serial.readChar() returns a single char 'A', 'a'\n// serial.readBytes() returns all of the data available as an array of bytes\n// serial.readBytesUntil('\\n') returns all of the data available until a '\\n' (line break) is encountered\n// serial.readString() retunrs all of the data available as a string\n// serial.readStringUntil('\\n') returns all of the data available as a tring until a (line break) is encountered\n// serial.last() returns the last byte of data from the buffer\n// serial.lastChar() returns the last byte of data from the buffer as a char\n// serial.clear() clears the underlying serial buffer\n// serial.available() returns the number of bytes available in the buffer\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\n\t// Instantiate our SerialPort object\n\tserial = new p5.SerialPort() // instantiate\n\tlet portlist = serial.list() // list available ports\n\tserial.open(serialPort) // connect with serial port (set var above)\n\n\t// Register some callbacks\n\tserial.on('connected', serverConnected) // connected to server\n\tserial.on('list', gotList) // list available serial ports\n\tserial.on('data', gotData) // received data from serial port\n\tserial.on('error', gotError) // on error\n\tserial.on('open', gotOpen) // serial port read for read/write\n\t\n\ttextAlign(CENTER, CENTER)\n\ttextSize(50)\n\tfill(255)\n\ttext(\"p5.serial template = not much to see here...\\nhappy live » [ hardware ] « coding!\", 0, 0, width, height)\n}\n\n\nfunction draw() {\n\t// Polling method\n\n\t//if (serial.available() > 0) {\n\t//  let data = serial.read()\n\t//  ellipse(50, 50, data, data)\n\t//}\n\n}\n\n// We are connected and ready to go\nfunction serverConnected() {\n\tprint(\"We are connected!\")\n}\n\n// Got the list of ports\nfunction gotList(thelist) {\n\t// theList is an array of their names\n\tfor(let i = 0; i < thelist.length; i++) {\n\t\t// Display in the console\n\t\tprint(i + \" \" + thelist[i])\n\t}\n}\n\n// Connected to our serial device\nfunction gotOpen() {\n\tprint(\"Serial Port is open!\")\n}\n\n// Ut oh, here is an error, let's log it\nfunction gotError(theerror) {\n\tprint(theerror)\n}\n\n// There is data available to work with from the serial port\nfunction gotData() {\n\tlet currentString = serial.readStringUntil(\"\\r\\n\")\n\tconsole.log(currentString)\n}"
            },
            {
              "name": "_hardware_ar",
              "mod": "1731690450199",
              "type": "sketch",
              "code": "/*\n\t_hardware_ar // cc tiborudvari.com 2024\n\tcopy + paste as COCODING session, goto URL on AR device, go wild!\n\t\n\ttibor's research : https://www.tiborudvari.com/projects/spatial-p5\n\tp5.xr : https://p5xr.org/\n\ton ar device, disable to autostart: chrome://flags/#webxr-enforce-user-activation\n\timmersive web emulator: https://p5xr.org/#/quick-start/emulator\n*/\n\nlet libs = ['https://cdn.jsdelivr.net/npm/p5.xr@latest/dist/p5xr.min.js']\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, AR);\n}\n\nfunction draw() {\n\tscale(1, -1) // fix AR vs p5 inverted y-axis\n\n\tpush();\n\ttranslate(0, .47, -0.5);\n\trotateY(frameCount * .002)\n\tbox(.1, .1, .1)\n\tpop();\n}"
            }
          ]
        },
        {
          "name": "_HY5",
          "mod": "1708473617773",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_hy5_p5_hydra",
              "mod": "1713458383870",
              "type": "sketch",
              "code": "/*\n\t_HY5_p5_hydra // cc teddavis.org 2024\n\tpass p5 into hydra\n\tdocs: https://github.com/ffd8/hy5\n*/\n\nlet libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js', 'https://cdn.jsdelivr.net/gh/ffd8/hy5@main/hy5.js', 'includes/libs/hy5.js']\n\n// sandbox - start\nH.pixelDensity(2) // 2x = retina, set <= 1 if laggy\n\ns0.initP5() // send p5 to hydra\nP5.toggle(0) // optionally hide p5\n\nsrc(s0)\n\t.modulate(noize())\n\t.out()\n// sandbox - end\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n}\n\nfunction draw() {\n\t// clear()\n\tcircle(mouseX, mouseY, 100)\n}"
            },
            {
              "name": "_hy5_p5_hydra-typo",
              "mod": "1713458565216",
              "type": "sketch",
              "code": "/*\n\t_HY5_p5_hydra // cc teddavis.org 2024\n\tpass p5 with type into hydra\n\tdocs: https://github.com/ffd8/hy5\n*/\n\nlet libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js', 'https://cdn.jsdelivr.net/gh/ffd8/hy5@main/hy5.js', 'includes/libs/hy5.js']\n\n// sandbox - start\nH.pixelDensity(2) // 2x = retina, set <= 1 if laggy\n\ns0.initP5() // send p5 to hydra\nP5.toggle(0) // hide p5\n\nsrc(s0)\n.add(src(o0).scale(1.03), .9)\n.modulateScale(noize(1000), .1)\n.out()\n// sandbox - end\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\ttextAlign(CENTER, CENTER)\n}\n\nfunction draw() {\n\tclear()\n\tblendMode(DIFFERENCE)\n\tfill(255)\t\n\tcircle(mouseX, mouseY, height/2)\n\tcircle(width-mouseX, height-mouseY, height/2)\n\ttextSize(height/3)\n\ttranslate(noise(frameCount*.0051)*width, noise(frameCount*.005)*height)\n\ttext('P5LIVE',0, 0)\n}\n"
            },
            {
              "name": "_hy5_hydra_p5",
              "mod": "1713225401342",
              "type": "sketch",
              "code": "/*\n\t_HY5_hydra_p5 // cc teddavis.org 2024\n\tpass hydra into p5\n\tdocs: https://github.com/ffd8/hy5\n*/\n\nlet libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js', 'https://cdn.jsdelivr.net/gh/ffd8/hy5@main/hy5.js', 'includes/libs/hy5.js']\n\nH.pixelDensity(2) // 2x = retina, set <= 1 if laggy\n\n// sandbox - start\ns0.initP5()\n\ngradient(1)\n\t.blend(noize()\n\t\t.scale(1.1))\n\t.modulateScale(noize(), .2)\n\t.out(o0)\n// sandbox - end\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tangleMode(DEGREES)\n\tnoStroke()\n\tP5.zIndex(1)\n}\n\nfunction draw() {\n\tclear()\n\torbitControl(3)\n\trotateY(frameCount / 3)\n\trotateX(frameCount / 4)\n\n\ttexture(H.get())\n\tbox(height / 2)\n}"
            },
            {
              "name": "_hy5_hydra_p5_hydra",
              "mod": "1713225404495",
              "type": "sketch",
              "code": "/*\n\t_HY5_hydra_p5_hydra // cc teddavis.org 2024\n\tpass p5 into hydra\n\tdocs: https://github.com/ffd8/hy5\n*/\n\nlet libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js', 'https://cdn.jsdelivr.net/gh/ffd8/hy5@main/hy5.js', 'includes/libs/hy5.js']\n\n// sandbox - start\ns0.initP5()\nP5.toggle(0)\nH.toggle(0)\n\nnoize().out()\n\nvar H2 = HY5.hydra('hydra2', 'synth') // 2nd hydra\nsynth.s0.initP5()\nH2.z(2) // double check on top\n\nH2.pixelDensity(2) // 2x = retina, set <= 1 if laggy\n\nsynth.src(synth.s0)\n\t.modulateScale(synth.src(synth.o0).scale(1.01), .5)\n\t.out()\n// sandbox - end\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tnoStroke()\n\tangleMode(DEGREES)\n}\n\nfunction draw() {\n\tclear()\n\trotateY(frameCount/3)\n\trotateX(frameCount/4)\n\torbitControl(3)\n\t\n\ttexture(H.get())\n\tsphere(height/3)\n}\n\nfunction keyPressed(){\n\tif(key == 'S'){\n\t\tH2.save() // save 2nd hydra\n\t}\n}"
            },
            {
              "name": "_hy5_hydra_p5_x4",
              "mod": "1713225412154",
              "type": "sketch",
              "code": "/*\n\t_HY5_hydra_p5_x4 // cc teddavis.org 2024\n\tget hydra outputs as separate textures into p5\n\tdocs: https://github.com/ffd8/hy5\n*/\n\nlet libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js', 'https://cdn.jsdelivr.net/gh/ffd8/hy5@main/hy5.js', 'includes/libs/hy5.js']\n\n// sandbox - start\nH.pixelDensity(.5) // experiment from .01 Â» 2\n\n// H.toggle(0)\n\nosc().out()\n\nnoize().out(o1)\n\nvoronoi().out(o2)\n\ngradient().out(o3)\n\nrender()\n// sandbox - end\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tnoStroke()\n\tangleMode(DEGREES)\n\tP5.zIndex(1)\n}\n\nfunction draw() {\n\tclear()\n\torbitControl(3)\n\trotateX(frameCount/3)\n\t\n\tH.render() // get hydra o0-o3 as h0-h3\n\ttranslate(-height/2, 0)\n\ttexture(h0)\n\ttorus(height/4, height/12)\n\t\n\ttranslate(height/3, 0)\n\trotateX(90)\n\ttexture(h1)\n\ttorus(height/4, height/12)\n\t\n\ttranslate(height/3, 0)\n\trotateX(90)\n\ttexture(h2)\n\ttorus(height/4, height/12)\n\t\n\ttranslate(height/3, 0)\n\trotateX(90)\n\ttexture(h3)\n\ttorus(height/4, height/12)\n}"
            },
            {
              "name": "_hy5_hydra_p5_x4-array",
              "mod": "1713225414120",
              "type": "sketch",
              "code": "/*\n\t_HY5_hydra_p5_x4 // cc teddavis.org 2024\n\tget hydra outputs as separate [array of] textures into p5\n\tdocs: https://github.com/ffd8/hy5\n*/\n\nlet libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js', 'https://cdn.jsdelivr.net/gh/ffd8/hy5@main/hy5.js', 'includes/libs/hy5.js']\n\n// sandbox - start\nH.pixelDensity(.5) // experiment from .01 Â» 2\n// H.toggle(0) // turn on/off layer\n\nosc().out()\nnoize().out(o1)\nvoronoi().out(o2)\ngradient().out(o3)\n\nrender()\n// sandbox - end\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tnoStroke()\n\tangleMode(DEGREES)\n\tP5.zIndex(1)\n}\n\nfunction draw() {\n\tclear()\n\torbitControl(3)\n\tH.render() // get hydra o0-o3 as h[0] - h[3]\n\n\trotateX(frameCount / 3)\n\tfor(let i = 0; i < 4; i++) {\n\t\tpush()\n\t\ttranslate(-height / 2 + i * height / 3, 0)\n\t\trotateX(i * 90)\n\t\ttexture(h[i])\n\t\ttorus(height / 4, height / 12)\n\t\ttranslate(height / 3, 0)\n\t\tpop()\n\t}\n}"
            }
          ]
        },
        {
          "name": "_hydra",
          "mod": "1619055853167",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_hydra-only",
              "mod": "1708475920914",
              "type": "sketch",
              "code": "/*\t\n\t_hydra_only // cc teddavis.org 2022\n\tincase you only want to play with ~[HYDRA]LIVE\n\tedit hydra code within '// sandbox start/stop' for smooth (eval) changes\n\tcheatsheets: https://hydra.ojack.xyz/api/ + https://hydra.ojack.xyz/docs\n*/\n\n// no p5\nlet libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js']\nlet hydra = new Hydra()\nhydra.setResolution(window.innerWidth*2, window.innerHeight*2) // retina res\n\n// sandbox - start\n\nosc(10, .05, 1.3)\n\t.kaleid(8)\n\t.modulateScale(src(o0)\n\t\t.scale(1.5)\n\t\t.repeat(4, 4)\n\t\t.rotate(0, .1)\n\t\t.modulate(src(o0).scale(.4))\n\t)\n\t.out()\n\n// sandbox - stop"
            },
            {
              "name": "_hydra_texture",
              "mod": "1708475918072",
              "type": "sketch",
              "code": "/*\t\n\t_hydra_texture // cc ojack.xyz + teddavis.org 2021\n\tedit hydra code within open + close '// sandbox' tags for changes w/o recompiling p5!\n\tcheatsheets: https://hydra.ojack.xyz/api/ + https://hydra.ojack.xyz/docs\n\t+ see HY5 demos for better hydra + p5 bridge\n*/\n\nlet libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js']\n\n// hydra canvas + init\nlet hc = document.createElement('canvas') // hydra canvas + custom size\nhc.width = 640 // window.innerWidth // for full res\nhc.height = 360 // window.innerHeight // for full res\nlet hydra = new Hydra({detectAudio: false,canvas: hc})\nnoize = noise // use noize() since noise() is taken by p5js\n\nlet pg // store hydra texture\n\n\n// sandbox - start\nosc(35, .2, .8)\n\t.mask(osc(20, .1).rotate(25))\n\t// .kaleid(4)\n\t.repeatY(20)\n\t// .modulate(noize(10))\n\t.out()\n// sandbox - stop\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tbackground(0)\n\tpg = createGraphics(hc.width, hc.height)\n\tnoStroke()\n}\n\n\nfunction draw() {\n\t// grab + apply hydra texture\n\tpg.clear()\n\tpg.drawingContext.drawImage(hc, 0, 0, pg.width, pg.height)\n\ttexture(pg)\n\n\tplane(width, height) // fill screen w/ texture\n\n\trotateX(radians(frameCount / 8))\n\trotateY(radians(frameCount / 4))\n\ttorus(height/4, height/8, 50)\n}"
            },
            {
              "name": "_hydra_scope",
              "mod": "1708475914152",
              "type": "sketch",
              "code": "/*\t\n\t_hydra_scope // cc ojack.xyz + teddavis.org 2021\t\n\tuse scoped for hydra's noise() function which p5.js also has\n\t+ see HY5 demos for better hydra + p5 bridge\n*/\n\nlet libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js']\n\n// hydra canvas + init\nlet hc = document.createElement('canvas') // hydra canvas + custom size\nhc.width = 640 // window.innerWidth // for full res\nhc.height = 360 // window.innerHeight // for full res\nlet hydra = new Hydra({\n\tdetectAudio: false, // no mic\n\tcanvas: hc, // use hydra canvas\n\tmakeGlobal: false, // scoped\n\tautoLoop: false // custom tick() below\n})\nlet synth = hydra.synth // scoped hydra\n\nlet pg // store hydra texture\n\n\n// sandbox - start\nsynth.noise(8, .5)\n\t.modulate(synth.noise(5), .3)\n\t.modulate(synth.osc(5, .1, .2), .3)\n\t.out()\n// sandbox - stop\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tbackground(0)\n\tpg = createGraphics(hc.width, hc.height)\n\tnoStroke()\n}\n\nfunction draw() {\n\thydra.tick(1.5) // custom hydra animation speed!\n\n\t// grab + apply hydra texture\n\tpg.clear()\n\tpg.drawingContext.drawImage(hc, 0, 0, pg.width, pg.height)\n\ttexture(pg)\n\n\tplane(width, height)\n\n\trotateX(radians(frameCount / 8))\n\trotateZ(radians(-frameCount / 6))\n\tbox(height/3)\n}"
            },
            {
              "name": "_hydra_multi",
              "mod": "1708475906271",
              "type": "sketch",
              "code": "/*\t\n\t_hydra_multi // cc teddavis.org 2021\t\n\textends _hydra_scope for multiple instances!\n\t+ see HY5 demos for better hydra + p5 bridge\n*/\n\nlet libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js']\n\nlet synthCount = 3 // # of hydra instances\n\n// gen hydra instances\nlet pg = [synthCount],\n\thc = [synthCount],\n\tsynth = [synthCount]\n\nfor(let i = 0; i < synthCount; i++) {\n\thc[i] = document.createElement('canvas') // hydra canvas + custom size\n\thc[i].width = 640 // window.innerWidth // for full res\n\thc[i].height = 360 // window.innerHeight // for full res\n\n\tsynth[i] = new Hydra({\n\t\tdetectAudio: false, // no mic\n\t\tcanvas: hc[i], // use hydra canvas\n\t\tmakeGlobal: false, // scoped\n\t}).synth // scoped hydra\n}\n\n\n// sandbox - start\n// access each instance via synth[index]\nsynth[0].noise(8, .5)\n\t.modulate(synth[0].noise(5), .3)\n\t.modulate(synth[0].osc(5, .1, .2), .3)\n\t.out()\n\t\nsynth[1].osc(33, .05, .5)\n\t.modulate(synth[1].src(synth[1].o0).rotate(), .1)\n\t.out()\n\t\nsynth[2].osc(50, .15)\n\t.colorama(3)\n\t.rotate()\n\t.out()\n// sandbox - stop\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tbackground(0)\n\tnoStroke()\n\t\n\t// prep synth layers\n\tfor(let i = 0; i < synthCount; i++) {\n\t\tpg[i] = createGraphics(hc[i].width, hc[i].height)\n\t}\t\n}\n\nfunction draw() {\n\torbitControl(5)\n\n\t// grab + apply hydra textures\n\tfor(let i = 0; i < synthCount; i++) {\n\t\tpg[i].clear()\n\t\tpg[i].drawingContext.drawImage(hc[i], 0, 0, pg[i].width, pg[i].height)\n\t}\n\t\n\ttexture(pg[0]) // use hydra 1\n\trotateX(radians(frameCount / 8))\n\trotateZ(radians(-frameCount / 6))\n\ttorus(height/5, 40)\n\n\ttexture(pg[1]) // use hydra 2\n\ttranslate(0, height/4)\n\trotateY(radians(90))\n\ttorus(height/5, 40)\n\t\n\ttexture(pg[2]) // use hydra 0\n\ttranslate(0, height/4)\n\trotateY(radians(90))\n\ttorus(height/5, 40)\n\n}"
            },
            {
              "name": "_hydra_overlay",
              "mod": "1701310644123",
              "type": "sketch",
              "code": "/*\t\n\t_hydra_scope // cc ojack.xyz + teddavis.org 2021\n\tpass p5 canvas into hydra as source sketch surface manipulations\n\t+ see HY5 demos for better hydra + p5 bridge\n*/\n\nlet libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js']\n\n// hydra canvas + init\nlet hc = document.createElement('canvas')\nhc.width = window.innerWidth\nhc.height = window.innerHeight\ndocument.body.appendChild(hc)\nlet hydra = new Hydra({detectAudio: false,canvas: hc})\nhydra.setResolution(window.innerWidth*2, window.innerHeight*2) // retina res\nnoize = noise // use noize() since noise() is taken by p5js\n\nlet pg // store hydra texture\n\n// sandbox - start\nsrc(o0)\n\t.layer(src(s0))\n\t.scale(.996)\n\t.modulateScale(src(s0).pixelate(15, 10), .5)\n\t.scrollY(1.003)\n\t// .rotate( ()=>sin(frameCount*.01)*.01 ) // use p5 vars!\n\t// .modulateScale(osc(5, .1), .02)\n\t.out()\n// sandbox - stop\n\nfunction preload() {\n\tfont = loadFont(\"includes/demos-data/fonts/RobotoMono-Regular.otf\")\n}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\n\t// pass p5 canvas to hydra as s0 source\n\ts0.init({src: drawingContext.canvas})\n\tpg = createGraphics(hc.width, hc.height)\n\n\tbackground(0)\n\ttextFont(font)\n\ttextAlign(CENTER, CENTER)\n}\n\nfunction draw() {\n\tpg.drawingContext.drawImage(hc, 0, 0, pg.width, pg.height) // update texture\n\n\tclear()\n\tfill(0)\n\tstroke(255)\n\tstrokeWeight(2)\n\ttextSize(width / 5)\n\n\tlet offset = 10\n\ttext('P5LIVE', width / 2 + sin(frameCount * .03) * offset, height / 2 + cos(frameCount * .03) * offset)\n}\n\nfunction keyPressed(){\n\tif(key == 'S'){\n\t\tpg.save('P5LIVE_hydra.png') // save hydra texture\n\t}\n}"
            },
            {
              "name": "_hydra_feedback",
              "mod": "1701310646710",
              "type": "sketch",
              "code": "/*\t\n\t_hydra_scope // cc ojack.xyz + teddavis.org 2021\n\tgo wild sending p5 into hydra and pulling it back!\n\t+ see HY5 demos for better hydra + p5 bridge\n*/\n\nlet libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js']\n\nlet hc = document.createElement('canvas')\nhc.width = window.innerWidth\nhc.height = window.innerHeight\ndocument.body.appendChild(hc)\nlet hydra = new Hydra({ detectAudio: false, canvas: hc })\n// hydra.setResolution(window.innerWidth*2, window.innerHeight*2) // retina res\nnoize = noise // use noize() since noise() is taken by p5js\n\nlet pg // store hydra texture\n\n// sandbox - start\nsrc(o0)\n\t.layer(s0)\n\t.scroll(1.01, 1.01)\n\t.scale(1.01)\n\t.out()\n// sandbox  - stop\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tbackground(0)\n\tpg = createGraphics(hc.width, hc.height)\n\ts0.init({src: drawingContext.canvas })\n}\n\nfunction draw() {\n\tclear()\n\tpg.drawingContext.drawImage(hc, 0, 0, pg.width, pg.height)\n\n\trotateX(radians(frameCount*.4))\n\n\tfill(255)\n\tstroke(0)\n\tstrokeWeight(.5)\n\tif(mouseIsPressed){\n\t\tfill(0)\n\t\tstroke(255)\n\t}\n\ttorus(height/6, 20)\n\t\n\trotateY(radians(frameCount*.8))\n\t\n\tnoStroke()\n\ttexture(pg) // haha why no likey\n\ttorus(height/4, height/12)\n}"
            },
            {
              "name": "_hydra_audio",
              "mod": "1701310648626",
              "type": "sketch",
              "code": "/*\t\n\t_hydra_audio // cc teddavis.org 2024\n\tuse hydra a.fft[] for audio analysis\n\t+ see HY5 demos for better hydra + p5 bridge\n*/\n\n// no p5sound\nlet libs = ['https://unpkg.com/hydra-synth']\n\nlet hc = document.createElement('canvas')\nhc.width = window.innerWidth\nhc.height = window.innerHeight\ndocument.body.appendChild(hc)\nlet hydra = new Hydra({\n\tdetectAudio: true,\n\tcanvas: hc\n})\n// hydra.setResolution(window.innerWidth * 2, window.innerHeight * 2) // retina res\nnoize = hydra.synth.noise // use noize() since noise() is taken by p5js\n\n// sandbox - start\na.show() // a.hide() to remove\na.setBins(8)\na.setSmooth(.8)\n\nsrc(s0)\n\t.add(src(o0).scale(1.01), .9)\n\t.out()\n// sandbox  - stop\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tbackground(0)\n\ts0.init({\n\t\tsrc: canvas\n\t})\n\trectMode(CENTER)\n}\n\nfunction draw() {\n\tclear()\n\tnoFill()\n\tstroke(255)\n\tstrokeWeight(1)\n\trandomSeed(10)\n\tfor(let i = 0; i < a.fft.length; i++) {\n\t\tlet fft = a.fft[i] * height / 2\n\t\tlet w = width / a.fft.length\n\t\tlet x = w / 2 + i * w\n\t\tlet y = height * .7\n\t\trect(x, height / 2, 10, 15 + fft)\n\n\t\tcircle(x, y, fft)\n\t}\n}"
            }
          ]
        },
        {
          "name": "_shaders",
          "mod": "1605978111847",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_shaders_warp",
              "mod": "1693696149938",
              "type": "sketch",
              "code": "/*\t\n\t_shader_warp // cc alainbrusch.ch + teddavis.org 2020\t\n\tbuilt upon alain's ma thesis Â» p5shaders.xyz\n*/\n\n\n// define global variables for a texture (tex) and shader (warp)\nlet tex, warp\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL) // Shaders require WEBGL\n\tbackground(0)\n\n\tpixelDensity(1) // fixes retina display offset\n\tsetAttributes('antialias', true) // toggle depending on display / performance\n\n\t// create layer graphics for anything passed into shader\n\ttex = createGraphics(width, height)\n\ttex.background(0)\n\n\t// load vert/frag defined below\n\twarp = createShader(vertShader, fragShader)\n}\n\n\nfunction draw() {\n\t// draw on layer 'tex' = passed into shader\n\n\t// dots\n\ttex.stroke(255)\n\ttex.noFill()\n\ttex.ellipse(random(width), random(height), random(50, 150))\n\n\t// text\n\ttex.fill(255)\n\ttex.textSize(tex.width / 5)\n\ttex.textAlign(CENTER, CENTER)\n\ttex.text(\"P5LIVE\", tex.width / 2, tex.height / 2)\n\n\n\t// pass required uniforms into shader (Book of Shaders style)\n\twarp.setUniform(\"u_texture\", tex) // pass tex layer as texture\n\twarp.setUniform(\"u_resolution\", [width, height]) // pass sketch size as u_resolution\n\n\t// pass custom values into shader for smoothCompile live-coding fun (add more!)\n\twarp.setUniform(\"u_time\", frameCount * 0.05) // pass frameCount as u_time\n\twarp.setUniform(\"u_warp\", mouseX) // set warp amount\n\twarp.setUniform(\"u_distortion\", 0.005) // set distortion amount\n\n\tshader(warp) // apply shader\n\trect(0, 0, width, height) // display shader\n}\n\n\n/* SHADER DEFINITIONS */\n\n// standard p5js vertex shader\nlet vertShader = `\n\tattribute vec3 aPosition;\n\tattribute vec2 aTexCoord;\n\tvarying vec2 vTexCoord;\n\n\tvoid main() {\n\t\tvTexCoord = aTexCoord;\n\t\tvec4 positionVec4 = vec4(aPosition, 1.0);\n\t\tpositionVec4.xy = positionVec4.xy * 2.0 - 1.0;\n\t\tgl_Position = positionVec4;\n\t}\n`\n\n\n\nlet fragShader = `\n\tprecision mediump float;\n\t\n\tuniform sampler2D u_texture; // our texture passed as p5 layer\n\tuniform vec2 u_resolution; // viewport resolution (in pixels)\n\t\n\tuniform float u_time;  // changes over time using p5 frameCount\n\tuniform float u_warp;  // warp amount to smoothCompile adjust from draw\n\tuniform float u_distortion; // distortion amount to smoothCompile adjust from draw\n\t\n\tvoid main() {\n\t\t// normalize the frag coordinates based on canvas size\n\t\tvec2 uv = gl_FragCoord.xy / u_resolution.xy;\n\t\n\t\t// fix orientation\n\t    uv.y = 1.0 - uv.y;\n\t\n\t    // add movement\n\t    float v = abs(sin( u_time + uv.x * (uv.y * 1.0) * u_warp) + 1.0) * u_distortion;\n\t\n\t\t// set frag\n\t    vec3 col = texture2D(u_texture, uv + v).rgb;\n\t    gl_FragColor = vec4(col, 1.0);\n\t}\n`"
            },
            {
              "name": "_shaders_matcap",
              "mod": "1693696231260",
              "type": "sketch",
              "code": "/*\n\t_shader_matcap // cc teddavis.org 2020\t\n\tMatcap (material capture) shader remixed from Adam Ferriss' p5jsShaderExamples\n\thttps://github.com/aferriss/p5jsShaderExamples\n\n\tcollection of matcaps\n\thttps://github.com/nidorx/matcaps\n*/\n\nlet myShader\nlet matcap, obj\n\nfunction preload() {\n\tmatcap = loadImage(\"includes/demos-data/images/fish.png\")\n\tobj = loadModel(\"includes/demos-data/3d/teapot.obj\")\n}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tpixelDensity(1) // fixes retina display offset\n\tnoStroke() // avoid strokes on 3d objects\n\n\t// set shader vert/frag from definitions below\n\tmyShader = createShader(vertShader, fragShader)\n}\n\nfunction draw() {\n\tbackground(0)\n\n\tshader(myShader) // set active shader\n\tmyShader.setUniform(\"uMatcapTexture\", matcap) // send texture to shader\n\n\torbitControl(5) // use mouse to rotate\n\trotateX(radians(frameCount / 2))\n\trotateZ(radians(frameCount / 4))\n\n\t// shader applied to any primatives\n\t// sphere(height, 16, 16)\n\n\tscale(5)\n\tmodel(obj)\n}\n\n\n/* SHADER DEFINITIONS */\n\nlet vertShader = `\n\t// getposition attribute of the geometry\n\tattribute vec3 aPosition;\n\t\n\t// get texture coordinate attribute from the geometry\n\tattribute vec2 aTexCoord;\n\t\n\t// get vertex normal attribute from the geometry\n\tattribute vec3 aNormal;\n\t\n\t// uProjectionMatrix to convert 3d world coords to screen coords \n\tuniform mat4 uProjectionMatrix;\n\t\n\t// uModelViewMatrix combines model matrix and view matrix\n\t// model matrix defines object position / rotation / scale\n\t// view matrix defines camera focal length / position\n\tuniform mat4 uModelViewMatrix;\n\t\n\t// normalmatrix is the transpose-inverse of the modelview matrix. \n\t// It's currently broken in p5, but normally used in these calculations\n\tuniform mat4 uNormalMatrix;\n\t\n\t// pass the normal and the eye to the fragment shader\n\tvarying vec3 vNormal;\n\tvarying vec3 vEye;\n\t\n\tvoid main() {\n\t\t// calculate world space eye position and world space normal\n\t\tvEye = normalize( vec3(uModelViewMatrix * vec4(aPosition, 1.0)));\n\t\n\t\t// typically use uNormalMatrix instead of uModelViewMatrix but currently there is a bug\n\t\tvNormal = normalize((uModelViewMatrix * vec4(aNormal, 0.0)).xyz);\n\t\n\t\t// copy position data into a vec4, using 1.0 as the w component\n\t\tvec4 positionVec4 = vec4(aPosition, 1.0);\n\t\n\t\t// move our vertex positions into screen space\n\t\t// order of multiplication is always projection * view * model * position\n\t\t// (model and view) have been combined so we just do projection * modelView * position\n\t\tgl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n\t}\n`\n\n\nlet fragShader = `\n\tprecision mediump float;\n\t\n\t// get normal from the vertex shader\n\tvarying vec3 vNormal;\n\tvarying vec3 vEye;\n\t\n\tuniform sampler2D uMatcapTexture;\n\t\n\t// returns texture coordinates. \n\t// input eye position and normal, returns how a sphere reflects the texture. \n\t// implementation borrowed from https://www.clicktorelease.com/blog/creating-spherical-environment-mapping-shader/\n\tvec2 matcap(vec3 eye, vec3 normal) {\n\t\tvec3 reflected = reflect(eye, normal);\n\t\tfloat m = 2.8284271247461903 * sqrt( reflected.z+1.0 );\n\t\treturn reflected.xy / m + 0.5;\n\t}\n\t\n\tvoid main() {\n\t\t// calculate our uv\n\t\tvec2 uv = matcap(vEye, vNormal) ;\n\t\n\t\t// sample the texture\n\t\tvec4 color = texture2D(uMatcapTexture, uv);\n\t\t\n\t\t// draw the texcoords to the screen\n\t\tgl_FragColor = color;\n\t}\n`"
            },
            {
              "name": "_shader_texture",
              "mod": "1693696242406",
              "type": "sketch",
              "code": "/*\t\n\t_shader_texture // cc teddavis.org 2020\t\n\tdemo applying shaders as texture on 3D primatives\n*/\n\n// define global variables for a texture (tex) and shader (warp)\nlet tex, theShader\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL) // Shaders require WEBGL\n\tbackground(0)\n\tnoStroke()\n\tpixelDensity(1) // fixes retina display offset\n\n\t// create texture to hold shader\n\ttex = createGraphics(windowWidth, windowHeight, WEBGL)\n\ttheShader = tex.createShader(vertShader, fragShader)\n\ttex.noStroke()\n}\n\n\nfunction draw() {\n\t// draw shader to texture\n\ttex.shader(theShader) // apply shader\n\n\t// set uniforms\n\ttheShader.setUniform('u_resolution', [width, height])\n\ttheShader.setUniform('u_time', frameCount * .01)\n\n\t// set + display shader\n\ttex.noStroke()\n\ttex.rect(0, 0, width, height)\n\n\t// set shader as texture for 3D primatives\n\ttexture(tex)\n\n\t// draw 3D environment\n\torbitControl(5)\n\ttranslate(sin(frameCount * .004) * width / 3, sin(frameCount * .008) * height / 8)\n\trotateX(radians(frameCount / 2))\n\tsphere(height * .125)\n\trotateZ(radians(-frameCount))\n\tellipse(0, 0, 400)\n\n}\n\n/* SHADER DEFINITIONS */\n\nlet vertShader = `\n\t//standard vertex shader\n\tattribute vec3 aPosition;\n\n\tvoid main() {\n\t\n\t\t// Copy the position data into a vec4, adding 1.0 as the w parameter\n\t\tvec4 positionVec4 = vec4(aPosition, 1.0);\n\t\n\t\t// Scale to make the output fit the canvas\n\t\tpositionVec4.xy = positionVec4.xy * 2.0 - 1.0; \n\t\n\t\t// Send the vertex information on to the fragment shader\n\t\tgl_Position = positionVec4;\n\t}\n`\n\n\nlet fragShader = `\n\tprecision mediump float;\n\n\tuniform vec2 u_resolution; // This is passed in as a uniform from the sketch.js file\n\tuniform float u_time;// send time\n\t\n\tvoid main() {\n\t\t// position of the pixel divided by resolution, to get normalized positions on the canvas\n\t\tvec2 st = gl_FragCoord.xy/u_resolution.xy; \n\t\n\t\tgl_FragColor = vec4(abs(sin(u_time + st.x*2.0)),abs(sin(u_time / st.y)),abs(sin(u_time)),1.0); // R,G,B,A\n\n\t}\n`"
            },
            {
              "name": "_shader_shadertoy_template",
              "mod": "1693697213644",
              "type": "sketch",
              "code": "/*\n\t_shader_shadertoy_template // cc teddavis.org 2020\n\t// remixing: https://www.shadertoy.com/view/Ms23DR\n\t\n\timporting from shadertoy.com\n\t- grab frag code from 'image' tab\n\t- add to 'frag' shader below, between following code:\n\t\t//////\tSTART SHADERTOY\t//////\n\t\t\n\t\t//////\tEND SHADERTOY\t//////\n\t\n\t- add necessary uniforms (iChannel0, iResolution, etc. as needed)\n\t- add custom uniforms for softCompile live-coding fun!\n\t\n\tcommon issues\n\t- change all: texture -> texture2D\n\t- change mainImage() -> main() remove params\n\t- change fragCoord -> gl_FragCoord\n\t- change fragColor -> gl_FragColor\n\t- uv.y = 1.0 - uv.y; // fix vertical flip\n\n*/\n\n// define global variables for a texture (tex) and shader (warp)\nlet tex, theShader\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL) // Shaders require WEBGL\n\t// setAttributes({ version: 1 });\n\tprint(webglVersion)\n\tbackground(0)\n\tpixelDensity(1) // fixes retina display offset\n\n\t// create 2D/3D layers for passing into shader\n\ttex = createGraphics(width, height)\n\ttex.background(0)\n\n\t// load vert/frag defined below\n\ttheShader = createShader(vertShader, fragShader)\n}\n\n\nfunction draw() {\n\t// draw on 'tex', which is passed into shader\n\ttex.stroke(255)\n\ttex.noFill()\n\ttex.ellipse(random(width), random(height), random(50, 150))\n\n\t// text\n\ttex.fill(255)\n\ttex.textSize(tex.width / 5)\n\ttex.textAlign(CENTER, CENTER)\n\ttex.text(\"P5LIVE\", tex.width / 2, tex.height / 2)\n\n\t// pass required uniforms to our shader (shadertoy style)\n\ttheShader.setUniform(\"iResolution\", [width, height])\n\ttheShader.setUniform('iChannel0', tex) // pass layer here\n\ttheShader.setUniform(\"iTime\", frameCount * .3)\n\ttheShader.setUniform(\"iMouse\", [map(mouseX, 0, width, 0, 1), map(mouseY, 0, height, 0, 1)])\n\n\tshader(theShader) // apply shader\n\trect(0, 0, width, height) // display shader\n}\n\n/* SHADER DEFINITIONS */\n\n// standard p5js vertex shader\nlet vertShader = `\nattribute vec3 aPosition;\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n  vTexCoord = aTexCoord;\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  positionVec4.xy = positionVec4.xy * 2.0 - 1.0;\n  gl_Position = positionVec4;\n}`\n\n\nlet fragShader = `\n\tprecision mediump float;\n\t\n\t// add shadertoy uniform's as needed (check imported shader)\n\tuniform vec2 iResolution;\n\tuniform sampler2D iChannel0;\n\tuniform sampler2D iChannel1;\n\tuniform float iTime;\n\tuniform int iFrame;\n\tuniform vec2 iMouse;\n\t\n\t/* \n\tDon't forget to:\n\t - change all: texture -> texture2D\n\t - change mainImage() -> main() remove params\n\t - change fragCoord -> gl_FragCoord\n\t - change fragColor -> gl_FragColor\n\t*/\n\t\n\t//////\tSTART SHADERTOY\t//////\n\t\n\t// Loosely based on postprocessing shader by inigo quilez, License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\t\n\tvec2 curve(vec2 uv)\n\t{\n\t\tuv = (uv - 0.5) * 2.0;\n\t\tuv *= 1.1;\t\n\t\tuv.x *= 1.0 + pow((abs(uv.y) / 5.0), 2.0);\n\t\tuv.y *= 1.0 + pow((abs(uv.x) / 4.0), 2.0);\n\t\tuv  = (uv / 2.0) + 0.5;\n\t\tuv =  uv *0.92 + 0.04;\n\t\treturn uv;\n\t}\n\tvoid main()\n\t{\n\t    vec2 q = gl_FragCoord.xy / iResolution.xy;\n\t    vec2 uv = q;\n\t    uv.y = 1.0 - uv.y;\n\t    uv = curve( uv );\n\t    vec3 oricol = texture2D( iChannel0, vec2(q.x,q.y) ).xyz;\n\t    vec3 col;\n\t\tfloat x =  sin(0.3*iTime+uv.y*21.0)*sin(0.7*iTime+uv.y*29.0)*sin(0.3+0.33*iTime+uv.y*31.0)*0.0017;\n\t\n\t    col.r = texture2D(iChannel0,vec2(x+uv.x+0.001,uv.y+0.001)).x+0.05;\n\t    col.g = texture2D(iChannel0,vec2(x+uv.x+0.000,uv.y-0.002)).y+0.05;\n\t    col.b = texture2D(iChannel0,vec2(x+uv.x-0.002,uv.y+0.000)).z+0.05;\n\t    col.r += 0.08*texture2D(iChannel0,0.75*vec2(x+0.025, -0.027)+vec2(uv.x+0.001,uv.y+0.001)).x;\n\t    col.g += 0.05*texture2D(iChannel0,0.75*vec2(x+-0.022, -0.02)+vec2(uv.x+0.000,uv.y-0.002)).y;\n\t    col.b += 0.08*texture2D(iChannel0,0.75*vec2(x+-0.02, -0.018)+vec2(uv.x-0.002,uv.y+0.000)).z;\n\t\n\t    col = clamp(col*0.6+0.4*col*col*1.0,0.0,1.0);\n\t\n\t    float vig = (0.0 + 1.0*16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y));\n\t\tcol *= vec3(pow(vig,0.3));\n\t\n\t    col *= vec3(0.95,1.05,0.95);\n\t\tcol *= 2.8;\n\t\n\t\tfloat scans = clamp( 0.35+0.35*sin(3.5*iTime+uv.y*iResolution.y*1.5), 0.0, 1.0);\n\t\t\n\t\tfloat s = pow(scans,1.7);\n\t\tcol = col*vec3( 0.4+0.7*s) ;\n\t\n\t    col *= 1.0+0.01*sin(110.0*iTime);\n\t\tif (uv.x < 0.0 || uv.x > 1.0)\n\t\t\tcol *= 0.0;\n\t\tif (uv.y < 0.0 || uv.y > 1.0)\n\t\t\tcol *= 0.0;\n\t\t\n\t\tcol*=1.0-0.65*vec3(clamp((mod(gl_FragCoord.x, 2.0)-1.0)*2.0,0.0,1.0));\n\t\t\n\t    float comp = smoothstep( 0.1, 0.9, sin(iTime) );\n\t \n\t\t// Remove the next line to stop cross-fade between original and postprocess\n\t//\tcol = mix( col, oricol, comp );\n\t\n\t    gl_FragColor = vec4(col,1.0);\n\t}\n\t\n\t//////\tEND SHADERTOY\t//////\n`"
            },
            {
              "name": "_shader_poisson_disc_blur",
              "mod": "1693697303056",
              "type": "sketch",
              "code": "/*\n\t_shader_poisson_disc_blur\n\t'Blur: Poisson Disc' by hornet\n\thttps://www.shadertoy.com/view/lsfGWn\n\tremix cc teddavis.org 2020\n*/\n\n// define global variables for a texture (tex) and shader (warp)\nlet tex, theShader\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL) // Shaders require WEBGL\n\tbackground(0)\n\n\tpixelDensity(1) // fixes retina display offset\n\n\t// create 2D/3D layer for passing into shader\n\ttex = createGraphics(width, height)\n\ttex.background(0)\n\n\t// load vert/frag defined below\n\ttheShader = createShader(vertShader, fragShader)\n}\n\n\nfunction draw() {\n\t// draw on 'tex', which is passed into shader\n\ttex.stroke(255)\n\ttex.noFill()\n\ttex.ellipse(random(width), random(height), random(50, 150))\n\n\t// text\n\ttex.fill(255)\n\ttex.textSize(tex.width / 5)\n\ttex.textAlign(CENTER, CENTER)\n\ttex.text(\"P5LIVE\", tex.width / 2, tex.height / 2)\n\n\t// pass required uniforms to our shader (shadertoy style)\n\ttheShader.setUniform(\"iResolution\", [width, height])\n\ttheShader.setUniform('iChannel0', tex) // pass layer here\n\ttheShader.setUniform(\"iTime\", frameCount * .001)\n\n\ttheShader.setUniform(\"iOffset\", map(mouseY, 0, height, 0, 1))\n\ttheShader.setUniform(\"iDistort\", 4.0)\n\ttheShader.setUniform(\"iMaxBlur\", map(mouseX, 0, width, 10, 100))\n\n\n\tshader(theShader) // apply shader\n\trect(0, 0, width, height) // display shader\n}\n\n/* SHADER DEFINITIONS */\n\nlet vertShader = `\n\tattribute vec3 aPosition;\n\tattribute vec2 aTexCoord;\n\tvarying vec2 vTexCoord;\n\t\n\tvoid main() {\n\t\tvTexCoord = aTexCoord;\n\t\n\t\tvec4 positionVec4 = vec4(aPosition, 1.0);\n\t\tpositionVec4.xy = positionVec4.xy * 2.0 - 1.0;\n\t\n\t\tgl_Position = positionVec4;\n\t}\n`\n\n\nlet fragShader = `\n\tprecision mediump float;\n\t\n\t//////\tSTART SHADERTOY\t//////\n\t\n\t#define ANIMATE_NOISE\n\t\n\tuniform vec2 iResolution;\n\tuniform sampler2D iChannel0;\n\tuniform float iTime;\n\t\n\tuniform float iOffset;\n\tuniform float iDistort;\n\tuniform float iMaxBlur;\n\t\n\tfloat nrand( vec2 n ) {\n\t\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n\t}\n\t\n\tvec2 rot2d( vec2 p, float a ) {\n\t\tvec2 sc = vec2(sin(a),cos(a));\n\t\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n\t}\n\t\n\tconst int NUM_TAPS = 27;\n\tconst float rcp_maxdist = 1.0 / 3.22244;\n\t\n\tvoid main(){\n\t\n\t    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n\t\tuv.y = 1.0-uv.y;\n\t   \n\t    float max_siz;\n\t    max_siz = iMaxBlur * (0.5 - 0.5 * sin(iDistort * uv.y - iOffset));\n\t        \n\t    //fragColor = vec4( vec3(max_siz), 1.0 );\n\t    //return;\n\t\t\n\t    //note: for samples-positions see\n\t    //      https://github.com/GPUOpen-Effects/ShadowFX/blob/master/amd_shadowfx/src/Shaders/\n\t    \n\t\tvec2 fTaps_Poisson[NUM_TAPS];\n\t    fTaps_Poisson[0]  = rcp_maxdist * vec2(  -0.8835609, 2.523391 );\n\t    fTaps_Poisson[1]  = rcp_maxdist * vec2(  -1.387375, 1.056318 );\n\t    fTaps_Poisson[2]  = rcp_maxdist * vec2(  -2.854452, 1.313645 );\n\t    fTaps_Poisson[3]  = rcp_maxdist * vec2(  0.6326182, 1.14569 );\n\t    fTaps_Poisson[4]  = rcp_maxdist * vec2(  1.331515, 3.637297 );\n\t    fTaps_Poisson[5]  = rcp_maxdist * vec2(  -2.175307, 3.885795 );\n\t    fTaps_Poisson[6]  = rcp_maxdist * vec2(  -0.5396664, 4.1938 );\n\t    fTaps_Poisson[7]  = rcp_maxdist * vec2(  -0.6708734, -0.36875 );\n\t    fTaps_Poisson[8]  = rcp_maxdist * vec2(  -2.083908, -0.6921188 );\n\t    fTaps_Poisson[9]  = rcp_maxdist * vec2(  -3.219028, 2.85465 );\n\t    fTaps_Poisson[10] = rcp_maxdist * vec2(  -1.863933, -2.742254 );\n\t    fTaps_Poisson[11] = rcp_maxdist * vec2(  -4.125739, -1.283028 );\n\t    fTaps_Poisson[12] = rcp_maxdist * vec2(  -3.376766, -2.81844 );\n\t    fTaps_Poisson[13] = rcp_maxdist * vec2(  -3.974553, 0.5459405 );\n\t    fTaps_Poisson[14] = rcp_maxdist * vec2(  3.102514, 1.717692 );\n\t    fTaps_Poisson[15] = rcp_maxdist * vec2(  2.951887, 3.186624 );\n\t    fTaps_Poisson[16] = rcp_maxdist * vec2(  1.33941, -0.166395 );\n\t    fTaps_Poisson[17] = rcp_maxdist * vec2(  2.814727, -0.3216669 );\n\t    fTaps_Poisson[18] = rcp_maxdist * vec2(  0.7786853, -2.235639 );\n\t    fTaps_Poisson[19] = rcp_maxdist * vec2(  -0.7396695, -1.702466 );\n\t    fTaps_Poisson[20] = rcp_maxdist * vec2(  0.4621856, -3.62525 );\n\t    fTaps_Poisson[21] = rcp_maxdist * vec2(  4.181541, 0.5883132 );\n\t    fTaps_Poisson[22] = rcp_maxdist * vec2(  4.22244, -1.11029 );\n\t    fTaps_Poisson[23] = rcp_maxdist * vec2(  2.116917, -1.789436 );\n\t    fTaps_Poisson[24] = rcp_maxdist * vec2(  1.915774, -3.425885 );\n\t    fTaps_Poisson[25] = rcp_maxdist * vec2(  3.142686, -2.656329 );\n\t    fTaps_Poisson[26] = rcp_maxdist * vec2(  -1.108632, -4.023479 );\n\t\n\t    vec4 sum = vec4(0);\n\t    vec2 seed = uv;\n\t    #if defined( ANIMATE_NOISE )\n\t    seed += fract( iTime );\n\t    #endif\n\t    float rnd = 6.28 * nrand( seed );\n\t\n\t    vec4 basis = vec4( rot2d(vec2(1,0),rnd), rot2d(vec2(0,1),rnd) );\n\t    for (int i=0; i < NUM_TAPS; i++)\n\t    {\n\t        vec2 ofs = fTaps_Poisson[i]; ofs = vec2(dot(ofs,basis.xz),dot(ofs,basis.yw) );\n\t        //vec2 ofs = rot2d( fTaps_Poisson[i], rnd );\n\t        vec2 texcoord = uv + max_siz * ofs / iResolution.xy;\n\t        sum += texture2D(iChannel0, texcoord, -10.0);\n\t    }\n\t\n\t\tgl_FragColor = sum / vec4(NUM_TAPS);\n\t}\n\t\n\t//////\tEND SHADERTOY\t//////\n\t\n`"
            },
            {
              "name": "_shaders_chromatic_aberration",
              "mod": "1693697307692",
              "type": "sketch",
              "code": "/*\n\t_shader_chromatic-aberration\n\thttps://github.com/spite/Wagner/blob/master/fragment-shaders/chromatic-aberration-fs.glsl\n\tremix cc teddavis.org 2020\n*/\n\n// define global variables for a texture (tex) and shader (warp)\nlet tex, theShader\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL) // Shaders require WEBGL\n\tbackground(0)\n\n\tpixelDensity(1) // fixes retina display offset\n\tsetAttributes('antialias', true) // toggle depending on display / performance\n\n\t// create 2D/3D layer for graphics being passed into shader\n\ttex = createGraphics(width, height)\n\ttex.background(0)\n\n\t// load vert/frag defined below\n\ttheShader = createShader(vertShader, fragShader)\n}\n\n\nfunction draw() {\n\t// draw on 'tex', which is passed into shader\n\ttex.noFill()\n\ttex.stroke(255)\n\tlet y = random(tex.height)\n\ttex.ellipse(random(width), random(height), random(50, 150))\n\t// text\n\ttex.fill(255)\n\ttex.textSize(tex.width / 5)\n\ttex.textAlign(CENTER, CENTER)\n\ttex.text(\"P5LIVE\", tex.width / 2, tex.height / 2)\n\n\t// pass required uniforms to our shader (don't change)\n\ttheShader.setUniform(\"resolution\", [width, height])\n\ttheShader.setUniform('tInput', tex)\n\ttheShader.setUniform(\"max_distort\", abs(sin(frameCount * .001) * 10))\n\ttheShader.setUniform(\"iMouse\", [map(mouseX, 0, width, 0, 1), map(mouseY, 0, height, 0, 1)])\n\ttheShader.setUniform(\"num_iter\", 12)\n\ttheShader.setUniform(\"focalDistance\", 42.0)\n\ttheShader.setUniform(\"aperture\", 12.0)\n\n\t// set + display shader\n\tshader(theShader) // apply shader\n\trect(0, 0, width, height) // display shader\n}\n\n/* SHADER DEFINITIONS */\n\nlet vertShader = `\n\tattribute vec3 aPosition;\n\tattribute vec2 aTexCoord;\n\t\n\tvarying vec2 vTexCoord;\n\t\n\tvoid main() {\n\t  vTexCoord = aTexCoord;\n\t\n\t  vec4 positionVec4 = vec4(aPosition, 1.0);\n\t  positionVec4.xy = positionVec4.xy * 2.0 - 1.0;\n\t\n\t  gl_Position = positionVec4;\n\t}\n`\n\n\nlet fragShader = `\n\t#ifdef GL_ES\n\tprecision mediump float;\n\t#endif\n\t\n\tuniform sampler2D tInput;\n\tuniform vec2 resolution;\n\tuniform float max_distort;\n\tuniform vec2 iMouse;\n\t\n\tvec2 barrelDistortion(vec2 coord, float amt) {\n\t\tvec2 cc = coord - iMouse;\n\t\tfloat dist = dot(cc, cc);\n\t\treturn coord + cc * dist * amt;\n\t}\n\t\n\tfloat sat( float t )\n\t{\n\t\treturn clamp( t, 0.0, 1.0 );\n\t}\n\t\n\tfloat linterp( float t ) {\n\t\treturn sat( 1.0 - abs( 2.0*t - 1.0 ) );\n\t}\n\t\n\tfloat remap( float t, float a, float b ) {\n\t\treturn sat( (t - a) / (b - a) );\n\t}\n\t\n\tvec4 spectrum_offset( float t ) {\n\t\tvec4 ret;\n\t\tfloat lo = step(t,0.5);\n\t\tfloat hi = 1.0-lo;\n\t\tfloat w = linterp( remap( t, 1.0/6.0, 5.0/6.0 ) );\n\t\tret = vec4(lo,1.0,hi, 1.) * vec4(1.0-w, w, 1.0-w, 1.);\n\t\n\t\treturn pow( ret, vec4(1.0/2.2) );\n\t}\n\t\n\tconst int num_iter = 37;\n\t\n\tvoid main()\n\t{\t\n\t\tvec2 uv=(gl_FragCoord.xy/resolution.xy*1.0)+.0;\n\t\tuv.y = 1.0 - uv.y;\n\t\t\n\t\tfloat reci_num_iter_f = 1.0 / float(num_iter);\n\t\tvec4 sumcol = vec4(0.0);\n\t\tvec4 sumw = vec4(0.0);\t\n\t\tfor ( int i=0; i<num_iter;++i )\n\t\t{\n\t\t\tfloat t = float(i) * reci_num_iter_f;\n\t\t\tvec4 w = spectrum_offset( t );\n\t\t\tsumw += w;\n\t\t\tsumcol += w * texture2D( tInput, barrelDistortion(uv, .16 * max_distort*t ) );\n\t\t}\n\t\t\t\n\t\tgl_FragColor = sumcol / sumw;\n\t}\n`"
            }
          ]
        }
      ]
    }
  ],
  "count": {
    "sketches": 57,
    "folders": 14
  }
}