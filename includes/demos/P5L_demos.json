{
  "version": "1.3.0",
  "revision": 34,
  "structure": [
    {
      "name": "demos",
      "mod": "1588903594629",
      "type": "folder",
      "toggle": "expand",
      "contents": [
        {
          "name": "new",
          "mod": "1588031529791",
          "type": "sketch",
          "code": "function setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\t\n}\n\nfunction draw() {\n\t\n}"
        },
        {
          "name": "_meta",
          "mod": "1588034572005",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_meta_P5LIVE",
              "mod": "1588000221380",
              "type": "sketch",
              "code": "/*\tP5LIVE_meta // cc teddavis.org 2019\t*/\n\n\nlet fontPath = 'includes/fonts/RobotoMono-Regular.ttf',\n\tfg, bg, y = 0,\n\tw = 0,\n\tfc = 0,\n\tc = [0, 0, 255],\n\trBox = 0,\n\tc1 = 0,\n\tc2 = 255,\n\tdx = 7,\n\tdy = 4,\n\tfont;\n\nfunction preload() {\n\tfont = loadFont(fontPath);\n}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\tbackground(0);\n\tnoFill();\n\tfill(255);\n\tnoStroke();\n\tfg = createGraphics(width, height);\n\tbg = createGraphics(width, height);\n\tbuildBox(fg);\n\tbuildBox(bg);\n\ttextFont(font);\n\ttextSize(48);\n\ttextAlign(CENTER, BOTTOM);\n}\n\nfunction draw() {\n\tbackground(0);\n\torbitControl(5);\n\n\trotateX(radians(0))\n\trotateY(radians(sin(fc * .005) * 25));\n\n\tscale(.57)\n\n\tif(frameCount % 8 == 0) {\n\t\ty += 20;\n\t\tif(y > height) {\n\t\t\ty = 0;\n\t\t\tbuildBox(fg);\n\t\t\tc = [random(255), random(255), random(255)];\n\t\t\tc1 = random(255);\n\t\t\tc2 = random(255);\n\t\t\tlet dd = 4;\n\t\t\tdx = floor(random(1, dd));\n\t\t\tdy = floor(random(1, dd));\n\t\t\tbuildBox(bg);\n\t\t}\n\t\tfg.fill(255);\n\t\tfg.noStroke();\n\t\tif(random(1) > .25)\n\t\t\tfg.rect(0, y, random(50, 250), 15);\n\t}\n\n\tbg.fill(c1);\n\tbg.stroke(c2);\n\tbg.strokeWeight(1);\n\tbg.ellipse(frameCount * dx % width, fc * dy % height, 50 + sin(fc * .03) * 250);\n\n\tpush();\n\ttranslate(0, 0, -100)\n\tbuildFont('p5.js', -width / 2)\n\ttexture(bg);\n\tplane(bg.width, bg.height);\n\tpop();\n\n\tbuildFont('ace-editor', -width / 2)\n\ttexture(fg);\n\tplane(fg.width, fg.height);\n\n\tfc++;\n}\n\nfunction buildBox(pg) {\n\tpg.clear();\n\tpg.noFill();\n\tpg.stroke(255);\n\tpg.strokeWeight(3);\n\tpg.rect(1, 1, pg.width - 2, pg.height - 2);\n}\n\nfunction buildFont(txt, xoff) {\n\tpush();\n\tlet yoff = 50;\n\tlet slant = 50;\n\ttranslate(xoff, -height / 2);\n\tfill(255);\n\tnoStroke();\n\ttext(txt, -slant, -yoff);\n\n\tstroke(255);\n\tline(0, 0, -slant, -yoff);\n\tnoStroke();\n\n\tpop();\n}"
            },
            {
              "name": "_meta_P5LIVE_COCODING",
              "mod": "1588000221380",
              "type": "sketch",
              "code": "/*\tP5LIVE_COCODING_meta // cc teddavis.org 2019\t*/\n\n\nlet fontPath = 'includes/fonts/RobotoMono-Regular.ttf',\n\tfg, bg, y = 0,\n\tw = 0,\n\tfc = 0,\n\tc = [0, 0, 255],\n\trBox = 0,\n\tc1 = 0,\n\tc2 = 255,\n\tdx = 7,\n\tdy = 4,\n\tfont;\n\nfunction preload() {\n\tfont = loadFont(fontPath);\n}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\tbackground(0);\n\tnoFill();\n\tfill(255);\n\tnoStroke();\n\tfg = createGraphics(width / 4, height);\n\tbg = createGraphics(width, height);\n\ttextFont(font);\n\ttextSize(48);\n\ttextAlign(CENTER, BOTTOM);\n\tbuildBox(fg);\n\tbuildBox(bg);\n}\n\nfunction draw() {\n\tbackground(0);\n\torbitControl(5)\n\trotateY(radians(sin(fc * .005) * 45));\n\trotateX(radians(sin(fc * .0025) * 25));\n\n\tscale(.57)\n\n\tif(frameCount % 8 == 0) {\n\t\ty += 20;\n\t\tif(y > height) {\n\t\t\ty = 0;\n\t\t\tbuildBox(fg);\n\t\t\tc = [random(255), random(255), random(255)];\n\t\t\tc1 = random(255);\n\t\t\tc2 = random(255);\n\t\t\tlet dd = 4;\n\t\t\tdx = floor(random(1, dd));\n\t\t\tdy = floor(random(1, dd));\n\t\t}\n\t\tfg.fill(255);\n\t\tfg.noStroke();\n\t\tif(random(1) > .25)\n\t\t\tfg.rect(0, y, random(50, 250), 15);\n\t}\n\n\tbg.fill(c1);\n\tbg.stroke(c2);\n\tbg.strokeWeight(1);\n\tbg.ellipse(frameCount * dx % width, fc * dy % height, 50 + sin(fc * .03) * 250);\n\n\tpush();\n\ttranslate(0, 0, -abs(sin(fc * .0025)) * 250);\n\tbuildFont('p5.js', -width / 2);\n\n\ttexture(bg);\n\tplane(bg.width, bg.height);\n\tpop();\n\n\n\tlet lc = 6;\n\tif(random(1) > .99) {\n\t\trBox = floor(random(lc));\n\n\t}\n\tfor(let i = 0; i < lc; i++) {\n\t\tlet x = map(i, 0, lc - 1, -width / 1.5, width / 1.5);\n\t\tpush();\n\t\ttranslate(x, 0);\n\n\t\tif(rBox == i) {\n\t\t\tfill(0, 255, 0, 150)\n\t\t\tnoStroke();\n\t\t\tplane(fg.width, fg.height);\n\t\t}\n\n\t\tbuildFont('Coder ' + (i + 1), 0)\n\t\ttexture(fg);\n\t\tplane(fg.width, fg.height);\n\t\tpop();\n\t}\n\n\tfc++;\n}\n\nfunction buildBox(pg) {\n\tpg.clear();\n\tpg.noFill();\n\tpg.stroke(255);\n\tpg.strokeWeight(3);\n\tpg.rect(1, 1, pg.width - 2, pg.height - 2);\n}\n\nfunction buildFont(txt, xoff) {\n\tpush();\n\tlet yoff = 50;\n\tlet slant = 50;\n\ttranslate(xoff, -height / 2);\n\tfill(255);\n\tnoStroke();\n\ttext(txt, -slant, -yoff);\n\n\tstroke(255);\n\tline(0, 0, -slant, -yoff);\n\tnoStroke();\n\n\tpop();\n}"
            },
            {
              "name": "_meta_basel.codes",
              "mod": "1588036522627",
              "type": "sketch",
              "code": "/*\t\n\thttp://basel.codes // 2019\n\t@maxfrischknect\n\t@yannmartins\n\t@teddavis\n\tmodified Boid class to ES5 for refreshing w/ help from https://babeljs.io\n*/\n\nlet personaggini = [];\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\ttextAlign(CENTER, CENTER)\n\tvar loopc = innerWidth / 100;\n\tvar brdr = 20;\n\tpersonaggini = [];\n\tfor(var i = 0; i < loopc; i++) {\n\t\tpersonaggini.push(new Boid(random(brdr, width - brdr), random(brdr, height - brdr)));\n\t}\n\n}\n\nfunction draw() {\n\tbackground(200);\n\tfor(let boid of personaggini) {\n\t\tboid.update();\n\t\tboid.proximity(personaggini);\n\t\tboid.edges();\n\t\tboid.show(personaggini);\n\t}\n}\n\nfunction mousePressed() {\n\tpersonaggini.push(new Boid(mouseX, mouseY))\n}\n\nfunction keyPressed() {\n\tif(keyCode == 8) {\n\t\tpersonaggini = [];\n\t}\n\n}\n\n\nvar emojis = [\n\t'🦄', '👶', '👶🏻', '👶🏼', '👶🏽', '👶🏾', '👶🏿', '🧒', '🧒🏻', '🧒🏼', '🧒🏽', '🧒🏾', '🧒🏿', '👦', '👦🏻', '👦🏼', '👦🏽', '👦🏾', '👦🏿', '👧', '👧🏻', '👧🏼', '👧🏽', '👧🏾', '👧🏿', '🧑', '🧑🏻', '🧑🏼', '🧑🏽', '🧑🏾', '🧑🏿', '👨', '👨🏻', '👨🏼', '👨🏽', '👨🏾', '👨🏿', '👩', '👩🏻', '👩🏼', '👩🏽', '👩🏾', '👩🏿', '🧓', '🧓🏻', '🧓🏼', '🧓🏽', '🧓🏾', '🧓🏿', '👴', '👴🏻', '👴🏼', '👴🏽', '👴🏾', '👴🏿', '👵', '👵🏻', '👵🏼', '👵🏽', '👵🏾', '👵🏿', '👨‍⚕️', '👨‍⚕', '👨🏻‍⚕️', '👨🏻‍⚕', '👨🏼‍⚕️', '👨🏼‍⚕', '👨🏽‍⚕️', '👨🏽‍⚕', '👨🏾‍⚕️', '👨🏾‍⚕', '👨🏿‍⚕️', '👨🏿‍⚕', '👩‍⚕️', '👩‍⚕', '👩🏻‍⚕️', '👩🏻‍⚕', '👩🏼‍⚕️', '👩🏼‍⚕', '👩🏽‍⚕️', '👩🏽‍⚕', '👩🏾‍⚕️', '👩🏾‍⚕', '👩🏿‍⚕️', '👩🏿‍⚕', '👨‍🎓', '👨🏻‍🎓', '👨🏼‍🎓', '👨🏽‍🎓', '👨🏾‍🎓', '👨🏿‍🎓', '👩‍🎓', '👩🏻‍🎓', '👩🏼‍🎓', '👩🏽‍🎓', '👩🏾‍🎓', '👩🏿‍🎓', '👨‍🏫', '👨🏻‍🏫', '👨🏼‍🏫', '👨🏽‍🏫', '👨🏾‍🏫', '👨🏿‍🏫', '👩‍🏫', '👩🏻‍🏫', '👩🏼‍🏫', '👩🏽‍🏫', '👩🏾‍🏫', '👩🏿‍🏫', '👨‍⚖️', '👨‍⚖', '👨🏻‍⚖️', '👨🏻‍⚖', '👨🏼‍⚖️', '👨🏼‍⚖', '👨🏽‍⚖️', '👨🏽‍⚖', '👨🏾‍⚖️', '👨🏾‍⚖', '👨🏿‍⚖️', '👨🏿‍⚖', '👩‍⚖️', '👩‍⚖', '👩🏻‍⚖️', '👩🏻‍⚖', '👩🏼‍⚖️', '👩🏼‍⚖', '👩🏽‍⚖️', '👩🏽‍⚖', '👩🏾‍⚖️', '👩🏾‍⚖', '👩🏿‍⚖️', '👩🏿‍⚖', '👨‍🌾', '👨🏻‍🌾', '👨🏼‍🌾', '👨🏽‍🌾', '👨🏾‍🌾', '👨🏿‍🌾', '👩‍🌾', '👩🏻‍🌾', '👩🏼‍🌾', '👩🏽‍🌾', '👩🏾‍🌾', '👩🏿‍🌾', '👨‍🍳', '👨🏻‍🍳', '👨🏼‍🍳', '👨🏽‍🍳', '👨🏾‍🍳', '👨🏿‍🍳', '👩‍🍳', '👩🏻‍🍳', '👩🏼‍🍳', '👩🏽‍🍳', '👩🏾‍🍳', '👩🏿‍🍳', '👨‍🔧', '👨🏻‍🔧', '👨🏼‍🔧', '👨🏽‍🔧', '👨🏾‍🔧', '👨🏿‍🔧', '👩‍🔧', '👩🏻‍🔧', '👩🏼‍🔧', '👩🏽‍🔧', '👩🏾‍🔧', '👩🏿‍🔧', '👨‍🏭', '👨🏻‍🏭', '👨🏼‍🏭', '👨🏽‍🏭', '👨🏾‍🏭', '👨🏿‍🏭', '👩‍🏭', '👩🏻‍🏭', '👩🏼‍🏭', '👩🏽‍🏭', '👩🏾‍🏭', '👩🏿‍🏭', '👨‍💼', '👨🏻‍💼', '👨🏼‍💼', '👨🏽‍💼', '👨🏾‍💼', '👨🏿‍💼', '👩‍💼', '👩🏻‍💼', '👩🏼‍💼', '👩🏽‍💼', '👩🏾‍💼', '👩🏿‍💼', '👨‍🔬', '👨🏻‍🔬', '👨🏼‍🔬', '👨🏽‍🔬', '👨🏾‍🔬', '👨🏿‍🔬', '👩‍🔬', '👩🏻‍🔬', '👩🏼‍🔬', '👩🏽‍🔬', '👩🏾‍🔬', '👩🏿‍🔬', '👨‍💻', '👨🏻‍💻', '👨🏼‍💻', '👨🏽‍💻', '👨🏾‍💻', '👨🏿‍💻', '👩‍💻', '👩🏻‍💻', '👩🏼‍💻', '👩🏽‍💻', '👩🏾‍💻', '👩🏿‍💻', '👨‍🎤', '👨🏻‍🎤', '👨🏼‍🎤', '👨🏽‍🎤', '👨🏾‍🎤', '👨🏿‍🎤', '👩‍🎤', '👩🏻‍🎤', '👩🏼‍🎤', '👩🏽‍🎤', '👩🏾‍🎤', '👩🏿‍🎤', '👨‍🎨', '👨🏻‍🎨', '👨🏼‍🎨', '👨🏽‍🎨', '👨🏾‍🎨', '👨🏿‍🎨', '👩‍🎨', '👩🏻‍🎨', '👩🏼‍🎨', '👩🏽‍🎨', '👩🏾‍🎨', '👩🏿‍🎨', '👨‍✈️', '👨‍✈', '👨🏻‍✈️', '👨🏻‍✈', '👨🏼‍✈️', '👨🏼‍✈', '👨🏽‍✈️', '👨🏽‍✈', '👨🏾‍✈️', '👨🏾‍✈', '👨🏿‍✈️', '👨🏿‍✈', '👩‍✈️', '👩‍✈', '👩🏻‍✈️', '👩🏻‍✈', '👩🏼‍✈️', '👩🏼‍✈', '👩🏽‍✈️', '👩🏽‍✈', '👩🏾‍✈️', '👩🏾‍✈', '👩🏿‍✈️', '👩🏿‍✈', '👨‍🚀', '👨🏻‍🚀', '👨🏼‍🚀', '👨🏽‍🚀', '👨🏾‍🚀', '👨🏿‍🚀', '👩‍🚀', '👩🏻‍🚀', '👩🏼‍🚀', '👩🏽‍🚀', '👩🏾‍🚀', '👩🏿‍🚀', '👨‍🚒', '👨🏻‍🚒', '👨🏼‍🚒', '👨🏽‍🚒', '👨🏾‍🚒', '👨🏿‍🚒', '👩‍🚒', '👩🏻‍🚒', '👩🏼‍🚒', '👩🏽‍🚒', '👩🏾‍🚒', '👩🏿‍🚒', '👮', '👮🏻', '👮🏼', '👮🏽', '👮🏾', '👮🏿', '👮‍♂️', '👮‍♂', '👮🏻‍♂️', '👮🏻‍♂', '👮🏼‍♂️', '👮🏼‍♂', '👮🏽‍♂️', '👮🏽‍♂', '👮🏾‍♂️', '👮🏾‍♂', '👮🏿‍♂️', '👮🏿‍♂', '👮‍♀️', '👮‍♀', '👮🏻‍♀️', '👮🏻‍♀', '👮🏼‍♀️', '👮🏼‍♀', '👮🏽‍♀️', '👮🏽‍♀', '👮🏾‍♀️', '👮🏾‍♀', '👮🏿‍♀️', '👮🏿‍♀', '🕵️', '🕵', '🕵🏻', '🕵🏼', '🕵🏽', '🕵🏾', '🕵🏿', '🕵️‍♂️', '🕵‍♂️', '🕵️‍', '🕵‍♂', '🕵🏻‍♂️', '🕵🏻‍♂', '🕵🏼‍♂️', '🕵🏼‍♂', '🕵🏽‍♂️', '🕵🏽‍♂', '🕵🏾‍♂️', '🕵🏾‍♂', '🕵🏿‍♂️', '🕵🏿‍♂', '🕵️‍♀️', '🕵‍♀️', '🕵️‍', '🕵‍♀', '🕵🏻‍♀️', '🕵🏻‍♀', '🕵🏼‍♀️', '🕵🏼‍♀', '🕵🏽‍♀️', '🕵🏽‍♀', '🕵🏾‍♀️', '🕵🏾‍♀', '🕵🏿‍♀️', '🕵🏿‍♀', '💂', '💂🏻', '💂🏼', '💂🏽', '💂🏾', '💂🏿', '💂‍♂️', '💂‍♂', '💂🏻‍♂️', '💂🏻‍♂', '💂🏼‍♂️', '💂🏼‍♂', '💂🏽‍♂️', '💂🏽‍♂', '💂🏾‍♂️', '💂🏾‍♂', '💂🏿‍♂️', '💂🏿‍♂', '💂‍♀️', '💂‍♀', '💂🏻‍♀️', '💂🏻‍♀', '💂🏼‍♀️', '💂🏼‍♀', '💂🏽‍♀️', '💂🏽‍♀', '💂🏾‍♀️', '💂🏾‍♀', '💂🏿‍♀️', '💂🏿‍♀', '👷', '👷🏻', '👷🏼', '👷🏽', '👷🏾', '👷🏿', '👷‍♂️', '👷‍♂', '👷🏻‍♂️', '👷🏻‍♂', '👷🏼‍♂️', '👷🏼‍♂', '👷🏽‍♂️', '👷🏽‍♂', '👷🏾‍♂️', '👷🏾‍♂', '👷🏿‍♂️', '👷🏿‍♂', '👷‍♀️', '👷‍♀', '👷🏻‍♀️', '👷🏻‍♀', '👷🏼‍♀️', '👷🏼‍♀', '👷🏽‍♀️', '👷🏽‍♀', '👷🏾‍♀️', '👷🏾‍♀', '👷🏿‍♀️', '👷🏿‍♀', '🤴', '🤴🏻', '🤴🏼', '🤴🏽', '🤴🏾', '🤴🏿', '👸', '👸🏻', '👸🏼', '👸🏽', '👸🏾', '👸🏿', '👳', '👳🏻', '👳🏼', '👳🏽', '👳🏾', '👳🏿', '👳‍♂️', '👳‍♂', '👳🏻‍♂️', '👳🏻‍♂', '👳🏼‍♂️', '👳🏼‍♂', '👳🏽‍♂️', '👳🏽‍♂', '👳🏾‍♂️', '👳🏾‍♂', '👳🏿‍♂️', '👳🏿‍♂', '👳‍♀️', '👳‍♀', '👳🏻‍♀️', '👳🏻‍♀', '👳🏼‍♀️', '👳🏼‍♀', '👳🏽‍♀️', '👳🏽‍♀', '👳🏾‍♀️', '👳🏾‍♀', '👳🏿‍♀️', '👳🏿‍♀', '👲', '👲🏻', '👲🏼', '👲🏽', '👲🏾', '👲🏿', '🧕', '🧕🏻', '🧕🏼', '🧕🏽', '🧕🏾', '🧕🏿', '🧔', '🧔🏻', '🧔🏼', '🧔🏽', '🧔🏾', '🧔🏿', '👱', '👱🏻', '👱🏼', '👱🏽', '👱🏾', '👱🏿', '👱‍♂️', '👱‍♂', '👱🏻‍♂️', '👱🏻‍♂', '👱🏼‍♂️', '👱🏼‍♂', '👱🏽‍♂️', '👱🏽‍♂', '👱🏾‍♂️', '👱🏾‍♂', '👱🏿‍♂️', '👱🏿‍♂', '👱‍♀️', '👱‍♀', '👱🏻‍♀️', '👱🏻‍♀', '👱🏼‍♀️', '👱🏼‍♀', '👱🏽‍♀️', '👱🏽‍♀', '👱🏾‍♀️', '👱🏾‍♀', '👱🏿‍♀️', '👱🏿‍♀', '👨‍', '👨🏻‍', '👨🏼‍', '👨🏽‍', '👨🏾‍', '👨🏿‍', '👩‍', '👩🏻‍', '👩🏼‍', '👩🏽‍', '👩🏾‍', '👩🏿‍', '👨‍', '👨🏻‍', '👨🏼‍', '👨🏽‍', '👨🏾‍', '👨🏿‍', '👩‍', '👩🏻‍', '👩🏼‍', '👩🏽‍', '👩🏾‍', '👩🏿‍', '👨‍', '👨🏻‍', '👨🏼‍', '👨🏽‍', '👨🏾‍', '👨', '👩‍', '👩🏻‍', '👩🏼‍', '👩🏽‍', '👩🏾‍', '👩', '👨', '👨🏻', '👨🏼', '👨🏽', '👨🏾', '👨🏿', '👩', '👩🏻', '👩🏼', '👩🏽', '👩🏾', '👩🏿‍', '🤵', '🤵🏻', '🤵🏼', '🤵🏽', '🤵🏾', '🤵🏿', '👰', '👰🏻', '👰🏼', '👰🏽', '👰🏾', '👰🏿', '🤰', '🤰🏻', '🤰🏼', '🤰🏽', '🤰🏾', '🤰🏿', '🤱', '🤱🏻', '🤱🏼', '🤱🏽', '🤱🏾', '🤱🏿', '👼', '👼🏻', '👼🏼', '👼🏽', '👼🏾', '👼🏿', '🎅', '🎅🏻', '🎅🏼', '🎅🏽', '🎅🏾', '🎅🏿', '🤶', '🤶🏻', '🤶🏼', '🤶🏽', '🤶🏾', '🤶🏿', '🧙', '🧙🏻', '🧙🏼', '🧙🏽', '🧙🏾', '🧙🏿', '🧙‍♀️', '🧙‍♀', '🧙🏻‍♀️', '🧙🏻‍♀', '🧙🏼‍♀️', '🧙🏼‍♀', '🧙🏽‍♀️', '🧙🏽‍♀', '🧙🏾‍♀️', '🧙🏾‍♀', '🧙🏿‍♀️', '🧙🏿‍♀', '🧙‍♂️', '🧙‍♂', '🧙🏻‍♂️', '🧙🏻‍♂', '🧙🏼‍♂️', '🧙🏼‍♂', '🧙🏽‍♂️', '🧙🏽‍♂', '🧙🏾‍♂️', '🧙🏾‍♂', '🧙🏿‍♂️', '🧙🏿‍♂', '🧚', '🧚🏻', '🧚🏼', '🧚🏽', '🧚🏾', '🧚🏿', '🧚‍♀️', '🧚‍♀', '🧚🏻‍♀️', '🧚🏻‍♀', '🧚🏼‍♀️', '🧚🏼‍♀', '🧚🏽‍♀️', '🧚🏽‍♀', '🧚🏾‍♀️', '🧚🏾‍♀', '🧚🏿‍♀️', '🧚🏿‍♀', '🧚‍♂️', '🧚‍♂', '🧚🏻‍♂️', '🧚🏻‍♂', '🧚🏼‍♂️', '🧚🏼‍♂', '🧚🏽‍♂️', '🧚🏽‍♂', '🧚🏾‍♂️', '🧚🏾‍♂', '🧚🏿‍♂️', '🧚🏿‍♂', '🧛', '🧛🏻', '🧛🏼', '🧛🏽', '🧛🏾', '🧛🏿', '🧛‍♀️', '🧛‍♀', '🧛🏻‍♀️', '🧛🏻‍♀', '🧛🏼‍♀️', '🧛🏼‍♀', '🧛🏽‍♀️', '🧛🏽‍♀', '🧛🏾‍♀️', '🧛🏾‍♀', '🧛🏿‍♀️', '🧛🏿‍♀', '🧛‍♂️', '🧛‍♂', '🧛🏻‍♂️', '🧛🏻‍♂', '🧛🏼‍♂️', '🧛🏼‍♂', '🧛🏽‍♂️', '🧛🏽‍♂', '🧛🏾‍♂️', '🧛🏾‍♂', '🧛🏿‍♂️', '🧛🏿‍♂', '🧜', '🧜🏻', '🧜🏼', '🧜🏽', '🧜🏾', '🧜🏿', '🧜‍♀️', '🧜‍♀', '🧜🏻‍♀️', '🧜🏻‍♀', '🧜🏼‍♀️', '🧜🏼‍♀', '🧜🏽‍♀️', '🧜🏽‍♀', '🧜🏾‍♀️', '🧜🏾‍♀', '🧜🏿‍♀️', '🧜🏿‍♀', '🧜‍♂️', '🧜‍♂', '🧜🏻‍♂️', '🧜🏻‍♂', '🧜🏼‍♂️', '🧜🏼‍♂', '🧜🏽‍♂️', '🧜🏽‍♂', '🧜🏾‍♂️', '🧜🏾‍♂', '🧜🏿‍♂️', '🧜🏿‍♂', '🧝', '🧝🏻', '🧝🏼', '🧝🏽', '🧝🏾', '🧝🏿', '🧝‍♀️', '🧝‍♀', '🧝🏻‍♀️', '🧝🏻‍♀', '🧝🏼‍♀️', '🧝🏼‍♀', '🧝🏽‍♀️', '🧝🏽‍♀', '🧝🏾‍♀️', '🧝🏾‍♀', '🧝🏿‍♀️', '🧝🏿‍♀', '🧝‍♂️', '🧝‍♂', '🧝🏻‍♂️', '🧝🏻‍♂', '🧝🏼‍♂️', '🧝🏼‍♂', '🧝🏽‍♂️', '🧝🏽‍♂', '🧝🏾‍♂️', '🧝🏾‍♂', '🧝🏿‍♂️', '🧝🏿‍♂', '🧞', '🧞‍♀️', '🧞‍♀', '🧞‍♂️', '🧞‍♂', '🧟', '🧟‍♀️', '🧟‍♀', '🧟‍♂️', '🧟‍♂', '🙎', '🙎🏻', '🙎🏼', '🙎🏽', '🙎🏾', '🙎🏿', '🙎‍♂️', '🙎‍♂', '🙎🏻‍♂️', '🙎🏻‍♂', '🙎🏼‍♂️', '🙎🏼‍♂', '🙎🏽‍♂️', '🙎🏽‍♂', '🙎🏾‍♂️', '🙎🏾‍♂', '🙎🏿‍♂️', '🙎🏿‍♂', '🙎‍♀️', '🙎‍♀', '🙎🏻‍♀️', '🙎🏻‍♀', '🙎🏼‍♀️', '🙎🏼‍♀', '🙎🏽‍♀️', '🙎🏽‍♀', '🙎🏾‍♀️', '🙎🏾‍♀', '🙎🏿‍♀️', '🙎🏿‍♀', '🚶', '🚶🏻', '🚶🏼', '🚶🏽', '🚶🏾', '🚶🏿', '🚶‍♂️', '🚶‍♂', '🚶🏻‍♂️', '🚶🏻‍♂', '🚶🏼‍♂️', '🚶🏼‍♂', '🚶🏽‍♂️', '🚶🏽‍♂', '🚶🏾‍♂️', '🚶🏾‍♂', '🚶🏿‍♂️', '🚶🏿‍♂', '🚶‍♀️', '🚶‍♀', '🚶🏻‍♀️', '🚶🏻‍♀', '🚶🏼‍♀️', '🚶🏼‍♀', '🚶🏽‍♀️', '🚶🏽‍♀', '🚶🏾‍♀️', '🚶🏾‍♀', '🚶🏿‍♀️', '🚶🏿‍♀', '🏃', '🏃🏻', '🏃🏼', '🏃🏽', '🏃🏾', '🏃🏿', '🏃‍♂️', '🏃‍♂', '🏃🏻‍♂️', '🏃🏻‍♂', '🏃🏼‍♂️', '🏃🏼‍♂', '🏃🏽‍♂️', '🏃🏽‍♂', '🏃🏾‍♂️', '🏃🏾‍♂', '🏃🏿‍♂️', '🏃🏿‍♂', '🏃‍♀️', '🏃‍♀', '🏃🏻‍♀️', '🏃🏻‍♀', '🏃🏼‍♀️', '🏃🏼‍♀', '🏃🏽‍♀️', '🏃🏽‍♀', '🏃🏾‍♀️', '🏃🏾‍♀', '🏃🏿‍♀️', '🏃🏿‍♀', '💃', '💃🏻', '💃🏼', '💃🏽', '💃🏾', '💃🏿', '🕺', '🕺🏻', '🕺🏼', '🕺🏽', '🕺🏾', '🕺🏿', '🧖', '🧖🏻', '🧖🏼', '🧖🏽', '🧖🏾', '🧖🏿', '🧖‍♀️', '🧖‍♀', '🧖🏻‍♀️', '🧖🏻‍♀', '🧖🏼‍♀️', '🧖🏼‍♀', '🧖🏽‍♀️', '🧖🏽‍♀', '🧖🏾‍♀️', '🧖🏾‍♀', '🧖🏿‍♀️', '🧖🏿‍♀', '🧖‍♂️', '🧖‍♂', '🧖🏻‍♂️', '🧖🏻‍♂', '🧖🏼‍♂️', '🧖🏼‍♂', '🧖🏽‍♂️', '🧖🏽‍♂', '🧖🏾‍♂️', '🧖🏾‍♂', '🧖🏿‍♂️', '🧖🏿‍♂', '🧘', '🧘🏻', '🧘🏼', '🧘🏽', '🧘🏾', '🧘🏿', '🧘‍♀️', '🧘‍♀', '🧘🏻‍♀️', '🧘🏻‍♀', '🧘🏼‍♀️', '🧘🏼‍♀', '🧘🏽‍♀️', '🧘🏽‍♀', '🧘🏾‍♀️', '🧘🏾‍♀', '🧘🏿‍♀️', '🧘🏿‍♀', '🧘‍♂️', '🧘‍♂', '🧘🏻‍♂️', '🧘🏻‍♂', '🧘🏼‍♂️', '🧘🏼‍♂', '🧘🏽‍♂️', '🧘🏽‍♂', '🧘🏾‍♂️', '🧘🏾‍♂', '🧘🏿‍♂️', '🧘🏿‍♂', '🕴️', '🕴', '🕴🏻', '🕴🏼', '🕴🏽', '🕴🏾', '🕴🏿', '👪', '👨‍👩‍👦', '👨‍👩‍👧', '👨‍👩‍👧‍👦', '👨‍👩‍👦‍👦', '👨‍👩‍👧‍👧', '👨‍👨‍👦', '👨‍👨‍👧', '👨‍👨‍👧‍👦', '👨‍👨‍👦‍👦', '👨‍👨‍👧‍👧', '👩‍👩‍👦', '👩‍👩‍👧', '👩‍👩‍👧‍👦', '👩‍👩‍👦‍👦', '👩‍👩‍👧‍👧', '👨‍👦', '👨‍👦‍👦', '👨‍👧', '👨‍👧‍👦', '👨‍👧‍👧', '👩‍👦', '👩‍👦‍👦', '👩‍👧', '👩‍👧‍👦', '👩‍👧‍👧', '🐵', '🐒', '🦍', '🐶', '🐕', '🐩', '🐺', '🦊', '🐱', '🐈', '🦁', '🐯', '🐅', '🐆', '🐴', '🐎', '🦄', '🦓', '🦌', '🐮', '🐂', '🐃', '🐄', '🐷', '🐖', '🐗', '🐽', '🐏', '🐑', '🐐', '🐪', '🐫', '🦒', '🐘', '🦏', '🐭', '🐁', '🐀', '🐹', '🐰', '🐇', '🐿️', '🐿', '🦔', '🦇', '🐻', '🐨', '🐼', '🐾', '🦃', '🐔', '🐓', '🐣', '🐤', '🐥', '🐦', '🐧', '🕊️', '🕊', '🦅', '🦆', '🦉', '🐸', '🐊', '🐢', '🦎', '🐍', '🐲', '🐉', '🦕', '🦖', '🐳', '🐋', '🐬', '🐟', '🐠', '🐡', '🦈', '🐙', '🐚', '🦀', '🦐', '🦑', '🐌', '🦋', '🐛', '🐜', '🐝', '🐞', '🦗', '🕷️', '🕷', '🦂', '🌍', '🌎', '🌏', '🏛️', '🏠', '🏢', '🏨', '🏫', '🏰', '⛪', '🕌', '🕍', '⛩️', '🕋', '⛺', '🚃', '🚄', '🚅', '🚆', '🚇', '🚈', '🚉', '🚊', '🚝', '🚞', '🚋', '🚌', '🚐', '🚎', '🚢', '🛥️', '🛳️', '✈️', '🛩️', '🚁', '🚟', '🚠', '🚡', '🚀', '🛸', '☃️', '⛄', '☃'\n]\n\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n\tif(!(instance instanceof Constructor)) {\n\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t}\n}\n\nvar Boid = (function() {\n\tfunction Boid(x, y) {\n\t\t_classCallCheck(this, Boid);\n\n\t\tthis.boid = random(emojis);\n\t\tthis.pos = createVector(x, y);\n\t\tthis.ppos = createVector(this.pos.x, this.pos.y);\n\t\tthis.rvel = 1.5;\n\t\tthis.vel = createVector(\n\t\t\trandom(-this.rvel, this.rvel),\n\t\t\trandom(-this.rvel, this.rvel)\n\t\t);\n\t\tthis.r = random(15, 45);\n\t\tthis.directionx = 1;\n\t\tthis.directiony = 1;\n\t\tthis.maxSpeed = 50;\n\t\tthis.trail = [];\n\t}\n\n\tBoid.prototype.show = function show(balls) {\n\t\tthis.proximity(balls);\n\t\ttextSize(this.r);\n\t\ttext(this.boid, this.pos.x, this.pos.y);\n\t};\n\n\tBoid.prototype.update = function update() {\n\t\tthis.pos.x += this.vel.x * this.directionx;\n\t\tthis.pos.y += this.vel.y * this.directiony;\n\t};\n\n\tBoid.prototype.edges = function edges() {\n\t\tif(this.pos.x > width - this.r / 2 || this.pos.x < this.r / 2) {\n\t\t\tthis.directionx *= -1;\n\t\t}\n\t\tif(this.pos.y > height - this.r / 2 || this.pos.y < this.r / 2) {\n\t\t\tthis.directiony *= -1;\n\t\t}\n\t};\n\n\tBoid.prototype.proximity = function proximity(balls) {\n\t\tfor(\n\t\t\tvar _iterator = balls,\n\t\t\t\t_isArray = Array.isArray(_iterator),\n\t\t\t\t_i = 0,\n\t\t\t\t_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;\n\n\t\t) {\n\t\t\tvar _ref;\n\n\t\t\tif(_isArray) {\n\t\t\t\tif(_i >= _iterator.length) break;\n\t\t\t\t_ref = _iterator[_i++];\n\t\t\t} else {\n\t\t\t\t_i = _iterator.next();\n\t\t\t\tif(_i.done) break;\n\t\t\t\t_ref = _i.value;\n\t\t\t}\n\n\t\t\tvar ball = _ref;\n\n\t\t\tif(ball != this) {\n\t\t\t\tif(ball.pos.dist(this.pos) < 50) {\n\t\t\t\t\tstrokeWeight(2);\n\t\t\t\t\tstroke(255);\n\t\t\t\t\tline(ball.pos.x, ball.pos.y, this.pos.x, this.pos.y);\n\t\t\t\t\tif(this.r < 60) this.r += 0.1;\n\t\t\t\t\tvar dir = p5.Vector.sub(this.pos, ball.pos);\n\t\t\t\t\tdir.normalize();\n\t\t\t\t\tif(\n\t\t\t\t\t\tthis.pos.y < height - this.r / 2 &&\n\t\t\t\t\t\tthis.pos.y > this.r / 2 &&\n\t\t\t\t\t\tthis.pos.x < width - this.r / 2 &&\n\t\t\t\t\t\tthis.pos.x > this.r / 2\n\t\t\t\t\t)\n\t\t\t\t\t\tthis.pos.add(dir);\n\t\t\t\t\tthis.ppos = this.pos;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\treturn Boid;\n})();"
            }
          ]
        },
        {
          "name": "_math",
          "mod": "1588034695833",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_math_lissajousOrb",
              "mod": "1588358303106",
              "type": "sketch",
              "code": "/*\t_math_lissajousOrb // cc teddavis.org 2020\t*/\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tbackground(0);\n}\n\nfunction draw() {\n\n\tlet xSpeed = 2.1; // rate of left-right\n\tlet ySpeed = 1; // rate of up-down\n\tlet sSpeed = 10; // rate of ellipse\n\n\tfill(255);\n\tstroke(255);\n\tif(frameCount % 2 === 0) {\n\t\tstroke(0);\n\t}\n\tstrokeWeight(5);\n\n\tlet oscX = sin(frameCount * 0.01 * xSpeed) * height * .4;\n\tlet oscY = cos(frameCount * 0.01 * ySpeed) * height * .4;\n\tlet s = sin(frameCount * 0.01 * sSpeed) * 150;\n\n\ttranslate(width / 2, height / 2);\n\tellipse(oscX, oscY, s, s);\n}"
            },
            {
              "name": "_math_sinStrings",
              "mod": "1588358502024",
              "type": "sketch",
              "code": "/*\t_math_sinStrings // cc teddavis.org 2019\t*/\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tmouseX = width * 0.4;\n}\n\nfunction draw() {\n\tbackground(200);\n\tlet lc = 20;\n\tfill(0);\n\tfor(let i = 0; i < lc; i++) {\n\t\tlet s = width / lc;\n\t\tlet x = map(i, 0, lc - 1, 0, width);\n\t\tlet osc = sin((frameCount * .01) + i * map(mouseX, 0, width, 0, 5));\n\t\tlet y = height / 2 + osc * abs(mouseY - height / 2);\n\t\tstroke(150);\n\t\tstrokeWeight(2.1 - (osc * 2));\n\t\tline(x, y, x, 0);\n\t\tnoStroke();\n\t\tellipse(x, y, s, s);\n\t}\n}"
            },
            {
              "name": "_math_noisyWorm",
              "mod": "1588358373134",
              "type": "sketch",
              "code": "/*\t_math_noisyWorm // cc teddavis.org 2019\t*/\n\nlet x, y, s;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tnoCursor();\n\tbackground(0);\n}\n\nfunction draw() {\n\tx = noise(frameCount*.002) * width;\n\ty = noise(frameCount*.003) * height;\n\ts = noise(frameCount*.02) * 100;\n\n\tellipse(x, y, s);\n}\n\nfunction keyPressed() {\n\tif(keyCode == 8)\n\t\tbackground(0);\n}"
            },
            {
              "name": "_math_ease",
              "mod": "1588358405220",
              "type": "sketch",
              "code": "/* \n\t_math_ease // cc teddavis.org 2019\n\tP5LIVE built-in ease() function for smoothing values:\n\tease(inVal, outVariable, easeVal)\n*/\n\nlet x = 0,\n\ty = 0,\n\te = .05,\n\ts = 150;;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tfill(255);\n}\n\nfunction draw() {\n\tbackground(200, e * 255);\n\n\tx = ease(mouseX, x, e);\n\ty = ease(mouseY, y, e);\n\tfill(255);\n\tcircle(x, y, s);\n\n\tdebugMouse();\n}\n\nfunction debugMouse() {\n\tlet msg = \"direct:\\nx: \" + nf(mouseX, 3, 1) + \" / y: \" + nf(mouseY, 3, 1);\n\tmsg += \"\\n\\nease:\\nx: \" + nf(x, 3, 1) + \" / y: \" + nf(y, 3, 1);\n\tfill(200);\n\ttext(msg, x - s / 3, y - s / 5);\n}"
            }
          ]
        },
        {
          "name": "_webgl",
          "mod": "1588034539534",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_webgl_primatives",
              "mod": "1588358430980",
              "type": "sketch",
              "code": "/*\t_webgl_primatives // cc teddavis.org 2019\t*/\n\n\nlet v = .3;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\tangleMode(DEGREES);\n}\n\nfunction draw() {\n\tbackground(0);\n\torbitControl(5);\n\n\tortho();\n\n\tif(mouseIsPressed) {\n\t\tlights();\n\t\tnoStroke();\n\t\tfill(255);\n\t} else {\n\t\tstroke(255);\n\t\tnoFill();\n\t}\n\n\n\tpush();\n\ttranslate(rPos(0));\n\trotateX(frameCount / 4);\n\trotateZ(frameCount / 2);\n\tplane(150, 150);\n\tpop();\n\n\tpush();\n\ttranslate(rPos(50));\n\trotateX(frameCount / 4);\n\trotateZ(frameCount / 2);\n\tbox(150);\n\tpop();\n\n\tpush();\n\ttranslate(rPos(100));\n\trotateX(frameCount / 4);\n\trotateY(frameCount / 4);\n\tsphere(100);\n\tpop();\n\n\tpush();\n\ttranslate(rPos(150));\n\trotateX(frameCount / 4);\n\trotateY(frameCount / 4);\n\tellipsoid(100, 30);\n\tpop();\n\n\tpush();\n\ttranslate(rPos(200));\n\trotateY(frameCount / 2);\n\trotateX(frameCount / 3);\n\tcone(100, 150);\n\tpop();\n\n\tpush();\n\ttranslate(rPos(250));\n\trotateX(frameCount / 4);\n\trotateZ(frameCount / 3);\n\ttorus(100, 50);\n\tpop();\n\n\tpush();\n\ttranslate(rPos(300));\n\trotateY(frameCount / 2);\n\trotateZ(frameCount / 4);\n\tcylinder(100, 100);\n\tpop();\n}\n\nfunction rPos(off) {\n\tlet x = (sin(off + frameCount * v) * width / 3);\n\tlet y = (cos(off + frameCount * v) * height / 3);\n\treturn createVector(x, y);\n}"
            },
            {
              "name": "_webgl_objVertices",
              "mod": "1588875964275",
              "type": "sketch",
              "code": "/*\t_webgl_objVertices // cc teddavis.org 2020\t*/\n\n\nlet obj, geom;\n\nfunction preload() {\n\tobj = loadModel('includes/demos-data/3d/teapot.obj');\n}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\tgeom = obj.computeFaces(); // grab model geometry\n\t// console.log(geom)\n}\n\nfunction draw() {\n\tbackground(0);\n\torbitControl(5);\n\trotateY(radians(-frameCount / 2));\n\tstroke(0, 255, 0);\n\n\tscale(-4);\n\tfor(let i = 0; i < geom.vertices.length; i++) {\n\t\tlet v = geom.vertices[i];\n\t\tlet off = sin(i * 0.1 + frameCount * 0.05) * 2;\n\n\t\tstrokeWeight(off * 10);\n\t\tpoint(v.x, v.y + off, v.z);\n\t}\n}"
            },
            {
              "name": "_webgl_sphereBox",
              "mod": "1588358437000",
              "type": "sketch",
              "code": "/*\t_webgl_sphereBox // cc teddavis.org 2019\t*/\n\nlet lc = 8;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\tnoCursor();\n\tnoStroke();\n\n}\n\nfunction draw() {\n\tortho();\n\tbackground(0);\n\tfor(let i = 0; i < lc; i++) {\n\t\tfor(let j = 0; j < lc; j++) {\n\t\t\tlet mx = map(i, 0, lc - 1, -width / 2, width / 2);\n\t\t\tlet my = map(j, 0, lc - 1, -height / 2, height / 2);\n\n\t\t\tboxsphere(mx, my);\n\t\t}\n\t}\n}\n\nfunction boxsphere(x, y) {\n\tpush();\n\ttranslate(x, y);\n\tlet mmx = map(mouseX, 0, width, -width / 2, width / 2);\n\tlet mmy = map(mouseY, 0, height, -height / 2, height / 2);\n\tlet roff = -dist(mmx, mmy, x, y) / 2;\n\trotateY(radians(frameCount + mouseX));\n\trotateX(radians(mouseY));\n\tlet s = (width / lc / 2) + roff;\n\n\tfill(255);\n\tif(mouseIsPressed) {\n\t\tfill(0);\n\t}\n\tbox(s);\n\n\tfill(0);\n\tif(mouseIsPressed) {\n\t\tfill(255);\n\t}\n\tsphere(s * 0.65);\n\tpop();\n}"
            }
          ]
        },
        {
          "name": "_typo",
          "mod": "1588034463847",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_typo_textToPoints-circle",
              "mod": "1588875950939",
              "type": "sketch",
              "code": "/*\t_typo_textToPoints-circle // cc teddavis.org 2020\t*/\n\nlet font, points, bounds;\n\nfunction preload() {\n\tfont = loadFont(\"includes/demos-data/fonts/RobotoMono-Regular.otf\");\n}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tnoFill();\n\tstroke(255);\n\tstrokeWeight(1);\n\n\tgenType('P5L', 400);\n}\n\nfunction draw() {\n\tbackground(0);\n\n\ttranslate(width / 2 - bounds.w / 2, height / 2 + bounds.h / 2, 0)\n\n\tfor(let i = 0; i < points.length; i++) {\n\t\tlet p = points[i];\n\t\tcircle(p.x, p.y, mouseY/10)\n\t}\n}\n\nfunction keyPressed() {\n\tgenType(key, 600);\n}\n\nfunction genType(txtString, txtSize) {\n\t// textToPoints(txt, x, y, size, options)\n\tpoints = font.textToPoints(txtString, 0, 0, txtSize, {\n\t\tsampleFactor: .07,\n\t\tsimplifyThreshold: 0\n\t});\n\n\t// grab bounding box of text\n\tbounds = font.textBounds(txtString, 0, 0, txtSize);\n}"
            },
            {
              "name": "_typo_textToPoints-lines",
              "mod": "1588875956279",
              "type": "sketch",
              "code": "/*\t_typo_textToPoints-lines // cc teddavis.org 2020\t*/\n\nlet font, points, bounds;\n\nfunction preload() {\n\tfont = loadFont(\"includes/demos-data/fonts/RobotoMono-Regular.otf\");\n}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tnoFill();\n\tstroke(255);\n\tstrokeWeight(1);\n\n\tgenType('P5L', 400);\n}\n\nfunction draw() {\n\tbackground(0);\n\n\ttranslate(width / 2 - bounds.w / 2, height / 2 + bounds.h / 2, 0)\n\n\tbeginShape(LINES);\n\tfor(let i = 0; i < points.length; i++) {\n\t\tlet p = points[i];\n\t\tlet xScl = sin(i * .031 + frameCount * .021) * sin(frameCount * .01) * map(mouseX, 0, width, .01, .5);\n\t\tlet yScl = sin(i * .039 + frameCount * .04) * sin(frameCount * .002) * map(mouseY, 0, height, .01, .5)\n\t\tlet x = map(p.x, width * xScl, width * (1 + xScl), 0, width);\n\t\tlet y = map(p.y, height * yScl, height * (yScl + 1), 0, height);\n\t\tvertex(x, y);\n\t\tvertex(p.x, p.y);\n\t\t// ellipse(p.x, p.y, mouseX)\n\t}\n\tendShape(CLOSE);\n}\n\nfunction keyPressed() {\n\tgenType(key, 600);\n}\n\nfunction genType(txtString, txtSize) {\n\t// textToPoints(txt, x, y, size, options)\n\tpoints = font.textToPoints(txtString, 0, 0, txtSize, {\n\t\tsampleFactor: .1,\n\t\tsimplifyThreshold: 0\n\t});\n\n\t// grab bounding box of text\n\tbounds = font.textBounds(txtString, 0, 0, txtSize);\n}"
            }
          ]
        },
        {
          "name": "_gui",
          "mod": "1588034496007",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_gui_slidersGrid",
              "mod": "1588358631677",
              "type": "sketch",
              "code": "/*\t_gui_slidersGrid // cc teddavis.org 2019\t*/\n/*\thide editor to adjust sliders\t\t*/\n\nlet x, y, xoff, border, grid = 40;\nlet sGrid, sModular, sSize, sSpeed, sSizeSpeed, cbSize;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tnoStroke();\n\n\tx = width * .05;\n\ty = height * .05;\n\txoff = width * .4;\n\tbuildGUI();\n}\n\nfunction draw() {\n\tbackground(0);\n\n\tlet c = 0;\n\tfor(let i = 0; i < width; i += grid) {\n\t\tfor(let j = 0; j < height; j += grid) {\n\t\t\tfill(abs(sin(frameCount * sSpeed.value() / 1000 + c * sModular.value())) * 255);\n\t\t\tlet s = grid;\n\t\t\tif(cbSize.checked()) {\n\t\t\t\ts = sin(c * sSpeed.value() / sSizeSpeed.value()) * grid;\n\t\t\t}\n\t\t\tellipse(border + i, border + j, s)\n\t\t\tc++;\n\t\t}\n\t}\n\n\tdrawLabel();\n}\n\nfunction buildGUI() {\n\tborder = grid / 2;\n\tsGrid = createSlider(20, 100, grid);\n\tsGrid.position(x + xoff, y);\n\tsGrid.input(updateGrid);\n\tsSpeed = createSlider(2, 100, 10);\n\tsSpeed.position(x + xoff, y * 2);\n\tsModular = createSlider(0, 100, 11);\n\tsModular.position(x + xoff, y * 3);\n\tsSizeSpeed = createSlider(1, 4000, 100);\n\tsSizeSpeed.position(x + xoff, y * 4);\n\tcbSize = createCheckbox('', false);\n\tcbSize.position(xoff + x * .7, y * 4)\n}\n\nfunction updateGrid() {\n\tgrid = sGrid.value();\n\tborder = grid / 2;\n}\n\nfunction drawLabel() {\n\tfill(0, 200);\n\trect(xoff + width * .02, height * .02, 200, 180, 20);\n\n\tfill(255, 200);\n\ttext(\"GRID\", xoff + x, y);\n\ttext(\"SPEED\", xoff + x, y * 2);\n\ttext(\"MODULATE\", xoff + x, y * 3);\n\ttext(\"SIZE OFFSET\", xoff + x, y * 4);\n}"
            }
          ]
        },
        {
          "name": "_libs",
          "mod": "1588875982653",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_libs_voronoi",
              "mod": "1588876398472",
              "type": "sketch",
              "code": "/*\t_libs_voronoi // cc teddavis.org 2020 */\n\nlet libs = [\n\t'https://cdn.jsdelivr.net/npm/voronoi@1.0.0/rhill-voronoi-core.js' // remote\n\t, 'includes/demos-data/js/rhill-voronoi-core.js' // load locally (if offline)\n\t, 'includes/demos-data/js/voronoi-p5live.js'\n];\n\nlet bbox, voronoi;\nlet sites = [],\n\tedges = [];\nlet initTypo = true;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tbbox = {\n\t\txl: 0,\n\t\txr: width,\n\t\tyt: 0,\n\t\tyb: height\n\t};\n\tvoronoi = new Voronoi();\n\n\t// pre-loading custom points from 'voronoi-p5live.js'\n\ttypoPoints();\n\n\tstroke(255);\n\tstrokeWeight(2);\n\n}\n\nfunction draw() {\n\tbackground(0);\n\n\tif(mouseIsPressed) {\n\t\tif(initTypo) {\n\t\t\tsites = [];\n\t\t\tinitTypo = false;\n\t\t}\n\t\taddPoints(mouseX, mouseY);\n\t}\n\n\tbeginShape(LINES)\n\tfor(var i = 0; i < edges.length; i++) {\n\t\tlet edge = edges[i];\n\t\tvertex(edge.va.x, edge.va.y);\n\t\tvertex(edge.vb.x, edge.vb.y);\n\t}\n\tendShape();\n}\n\nfunction addPoints(x, y) {\n\tsites.push({\n\t\tx: x,\n\t\ty: y\n\t});\n\tresult = voronoi.compute(sites, bbox);\n\tedges = result.edges;\n}\n\n// custom preloaded points interpreter\nfunction typoPoints() {\n\tfor(let t of p5typo) {\n\t\tsites.push({\n\t\t\tx: t.x * width,\n\t\t\ty: t.y * height + height / 5\n\t\t});\n\t}\n\tresult = voronoi.compute(sites, bbox);\n\tedges = result.edges;\n}"
            }
          ]
        },
        {
          "name": "_audio",
          "mod": "1588035882416",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_audio_analysis",
              "mod": "1588358648121",
              "type": "sketch",
              "code": "/*\t\n\t_audio_analysis // cc teddavis.org 2019\n\tadd snippet to other sketches: CTRL + SHIFT + A \n*/\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\n\tsetupAudio();\n}\n\nfunction draw() {\n\t/* audio vars: amp, ampEase, fft, waveform */\n\tupdateAudio();\n\n\tbackground(0);\n\tnoFill();\n\tstroke(255);\n\n\t/* average */\n\ttext(\"MIX\", width * .5, height / 4);\n\tellipse(width / 2, height / 4, amp);\n\ttext(\"L\", width * .25, height / 4);\n\tellipse(width * .25, height / 4, ampStereo.l);\n\ttext(\"R\", width * .75, height / 4);\n\tellipse(width * .75, height / 4, ampStereo.r);\n\n\t/* waveform */\n\tbeginShape();\n\tfor(let i = 0; i < waveform.length; i++) {\n\t\tlet freq = waveform[i] * height / 4; // (-1, 1);\n\t\tlet x = map(i, 0, waveform.length, 0, width);\n\t\tcurveVertex(x, height / 2 + freq);\n\t}\n\tendShape();\n\n\n\t/* fft */\n\tfor(let i = 0; i < fft.length; i++) {\n\t\tlet freq = fft[i]; // (0, 255);\n\t\tlet x = map(i, 0, fft.length, 0, width);\n\t\tlet w = width / fft.length;\n\t\trect(x, height, w, -freq);\n\t}\n\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n\twaveform = [],\n\tamp = 0.0,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n\t},\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude\n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
            }
          ]
        },
        {
          "name": "_input",
          "mod": "1588033538041",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_input_camera",
              "mod": "1588360122268",
              "type": "sketch",
              "code": "/*\t_input_camera // cc teddavis.org 2020\t*/\n\n\nlet capture, scl = 1,\n\trot = 0;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tcapture = createCapture(VIDEO);\n\tcapture.size(320, 240);\n\tcapture.hide(); // hide raw camera\n\timageMode(CENTER);\n}\n\nfunction draw() {\n\tif(mouseIsPressed) {\n\t\tscl += (mouseY - pmouseY) / 100;\n\t\trot += mouseX - pmouseX;\n\t}\n\n\tpush();\n\ttranslate(mouseX, mouseY);\n\trotate(radians(rot));\n\timage(capture, 0, 0, capture.width * scl, capture.height * scl);\n\tpop();\n}"
            },
            {
              "name": "_input_cameraSynth",
              "mod": "1588360143648",
              "type": "sketch",
              "code": "/*\t_input_cameraSynth // cc teddavis.org 2020\t*/\n\n\nlet capture, thresholdAmount, scl,\n\tmx, my, ex, ey, easing = .03;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tcapture = createCapture(VIDEO);\n\tcapture.size(320, 240);\n\tcapture.hide(); // hide raw camera\n\tnoSmooth();\n\timageMode(CENTER);\n\tmx = 100;\n\tmy = 50;\n\tex = my;\n\tey = mx;\n\tscl = width / capture.width;\n\tthresholdAmount = 127;\n}\n\nfunction draw() {\n\tbackground(0, ey * .1);\n\n\tprocessMouse();\n\tprocessCamera();\n\n\timage(capture, width / 2, height / 2, capture.width * scl, capture.height * scl);\n}\n\nfunction processMouse() {\n\tif(mouseIsPressed) {\n\t\tmx = map(mouseX, 0, width, 0, 255);\n\t\tmy = map(mouseY, 0, height, 0, 255);\n\t}\n\tex = ease(mx, ex, easing);\n\tey = ease(my, ey, easing);\n\n\tscl = ey / 10;\n\tthresholdAmount = ex\n\n}\n\nfunction processCamera() {\n\tcapture.loadPixels();\n\tif(capture.pixels.length > 0) {\n\t\tlet pixels = capture.pixels;\n\n\t\tlet i = 0;\n\t\tfor(var y = 0; y < capture.height; y++) {\n\t\t\tfor(let x = 0; x < capture.width; x++) {\n\t\t\t\tlet redValue = pixels[i];\n\t\t\t\tlet outputValue = 0;\n\t\t\t\tif(redValue >= thresholdAmount) {\n\t\t\t\t\toutputValue = 255;\n\t\t\t\t}\n\n\t\t\t\tpixels[i++] = abs(sin(frameCount * .0012)) * mouseX % 255;\n\t\t\t\tpixels[i++] = abs(sin(frameCount * .003)) * ex % outputValue;\n\t\t\t\tpixels[i++] = abs(sin(frameCount * .0021)) * mouseY % 255;\n\t\t\t\tpixels[i++] = outputValue;\n\n\t\t\t\tpixels[i++] = 255;\n\t\t\t\tpixels[i++] = 255;\n\t\t\t}\n\t\t}\n\t}\n\tcapture.updatePixels();\n}"
            },
            {
              "name": "_input_midi",
              "mod": "1588358715542",
              "type": "sketch",
              "code": "/*\t\n\t_input_midi v2 - 07.04.20\n\tv1 initated at p5.js contributors conference 2019 // Music+Code in Performance track\n\tFrank-Ratchye STUDIO for Creative Inquiry at CMU + NEA\n\tSee Javascript Console after running setup for device IDs + Names\n*/\n\n/* PREFS */\nlet midiDeviceIn = 0; // [ID] or \"device name\"\nlet midiDeviceOut = 0; // [ID] or \"device name\"\nlet midiThru = false; // optionally pass all in -> out\n\nlet loadScripts = [\"includes/js/webmidi.min.js\"];\nlet midiInput, midiOutput, midiMsg = {};\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tbackground(0);\n\tsetupMidi(midiDeviceIn, midiDeviceOut); // deviceIn, deviceOut\n}\n\nfunction draw() {\n\tbackground(0, 15);\n\n}\n\nfunction noteOn(note) {\n\t// use note.type, .channel, .name, .number, .octave, .velocity\n\tlet x = map(note.number, 0, 128, 0, width);\n\tlet h = map(note.velocity, 0, 128, 0, height);\n\tpush();\n\tnoStroke();\n\tfill(note.velocity * 2);\n\trectMode(CENTER);\n\trect(x, height / 2, width / 128, h);\n\tpop();\n}\n\nfunction noteOff(note) {\n\t// use note.type, .channel, .name, .number, .octave, .velocity\n}\n\nfunction pitchBend(pitch) {\n\t// use pitch.type, .channel, .value\n}\n\nfunction controlChange(control) {\n\t// use control.type, .channel, .controllerNumber, .controllerName, .value\n}\n\nfunction midiToFreq(noteNumber) {\n\treturn 440 * Math.pow(2, (noteNumber - 69) / 12);\n}\n\n\nfunction mousePressed() {\n\t// example of sending midi note\n\t// sendNote(1, \"C\", 3, 1000, 127); // channel, note, octave, duration, velocity\n}\n\nfunction sendNote(channel, note, octave, duration, velocity) {\n\tmidiOutput.playNote(note + octave, channel, {\n\t\tduration: duration,\n\t\tvelocity: parseFloat(velocity) / 127.0\n\t});\n}\n\nfunction parseMidi(mm) {\n\t//print(mm);\n\tif(mm.note != undefined) {\n\t\tswitch (mm.note.type) {\n\t\t\tcase 'noteon':\n\t\t\t\tnoteOn(mm.note);\n\t\t\t\tbreak;\n\t\t\tcase 'noteoff':\n\t\t\t\tnoteOff(mm.note);\n\t\t\t\tbreak;\n\t\t}\n\t} else if(mm.pitch != undefined) {\n\t\tpitchBend(mm.pitch);\n\t} else if(mm.control != undefined) {\n\t\tcontrolChange(mm.contol);\n\t}\n}\n\nfunction setupMidi(idIn, idOut) {\n\tWebMidi.enable(function(err) {\n\t\tif(err) {\n\t\t\tconsole.log(\"WebMidi could not be enabled.\", err);\n\t\t}\n\n\t\t// Print to console available MIDI in/out id/names\n\t\tWebMidi.inputs.forEach(function(element, c) {\n\t\t\tprint(\"in  \\[\" + c + \"\\] \" + element.name);\n\t\t});\n\t\tWebMidi.outputs.forEach(function(element, c) {\n\t\t\tprint(\"out \\[\" + c + \"\\] \" + element.name);\n\t\t});\n\n\t\t// assign in channel:\n\t\tif(typeof idIn === 'number') {\n\t\t\tmidiInput = WebMidi.inputs[idIn];\n\t\t} else {\n\t\t\tmidiInput = WebMidi.getInputByName(idIn);\n\t\t}\n\n\t\tif(typeof idOut === 'number') {\n\t\t\tmidiOutput = WebMidi.outputs[idOut];\n\t\t} else {\n\t\t\tmidiOutput - WebMidi.getOutputByName(idOut);\n\t\t}\n\n\t\tmidiInput.addListener('midimessage', 'all', function(e) {\n\t\t\tif(midiThru) {\n\t\t\t\tif(e.data.length == 3) {\n\t\t\t\t\tmidiOutput.send(e.data[0], [e.data[1], e.data[2]]);\n\t\t\t\t} else {\n\t\t\t\t\tmidiOutput.send(e.data[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmidiMsg = {};\n\t\t\tmidiMsg.data = e.data;\n\t\t\tmidiMsg.timestamp = e.timestamp;\n\t\t\t// parseMidi(midiMsg) // optionally send raw only\n\t\t});\n\n\t\t// noteOn\n\t\tmidiInput.addListener('noteon', \"all\", function(e) {\n\t\t\tlet note = {\n\t\t\t\ttype: 'noteon'\n\t\t\t};\n\t\t\tnote.channel = e.channel;\n\t\t\tnote.number = e.note.number;\n\t\t\tnote.name = e.note.name;\n\t\t\tnote.octave = e.note.octave;\n\t\t\tnote.velocity = floor(127 * e.velocity);\n\n\t\t\tmidiMsg.note = note;\n\t\t\tparseMidi(midiMsg);\n\t\t});\n\n\t\t// noteOff\n\t\tmidiInput.addListener('noteoff', \"all\", function(e) {\n\t\t\tlet note = {\n\t\t\t\ttype: 'noteoff'\n\t\t\t};\n\t\t\tnote.channel = e.channel;\n\t\t\tnote.number = e.note.number;\n\t\t\tnote.name = e.note.name;\n\t\t\tnote.octave = e.note.octave;\n\t\t\tnote.velocity = 0;\n\n\t\t\tmidiMsg.note = note;\n\t\t\tparseMidi(midiMsg);\n\t\t});\n\n\t\t// pitchBend\n\t\tmidiInput.addListener('pitchbend', \"all\", function(e) {\n\t\t\tlet pitch = {\n\t\t\t\ttype: 'pitchbend'\n\t\t\t};\n\t\t\tpitch.channel = e.channel;\n\t\t\tpitch.value = floor(127 * e.value);\n\n\t\t\tmidiMsg.pitch = pitch;\n\t\t\tparseMidi(midiMsg);\n\t\t});\n\n\t\t// controlChange\n\t\tmidiInput.addListener('controlchange', \"all\", function(e) {\n\t\t\tlet control = {\n\t\t\t\ttype: 'controlchange'\n\t\t\t};\n\t\t\tcontrol.channel = e.channel;\n\t\t\tcontrol.controllerNumber = e.controller.number;\n\t\t\tcontrol.controllerName = e.controller.name;\n\t\t\tcontrol.value = e.value\n\n\t\t\tmidiMsg.control = control;\n\t\t\tparseMidi(midiMsg);\n\t\t});\n\n\t});\n}"
            },
            {
              "name": "_input_osc",
              "mod": "1588358732597",
              "type": "sketch",
              "code": "/*\t\n\t_input_osc // cc teddavis.org 2019\n\tRequires offline nodejs/npm installation of P5LIVE\n\t\n\tProcessing sketch: \n\thttps://gist.github.com/ffd8/f9f33cc7461f8467f62d5a792dde53ca\n*/\n\nlet libs = [\"includes/js/socket.io.js\"];\nlet socket, debugIn, debugOut;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\ttextSize(20);\n\tsetupOsc('127.0.0.1', 12000, 12001); // oscHost, oscPortIn, oscPortOut\n\tsendOsc('/screenSize', [width, height]); // set Processing to p5 scale\n\n\t// optional debug\n\tdebugIn = createElement('textarea');\n\tdebugBox(debugIn, 'OSC Received', 10, 0, width / 3, 50);\n\tdebugOut = createElement('textarea');\n\tdebugBox(debugOut, 'OSC Sent', width / 3 + 50, 0, width / 3, 50);\n}\n\nfunction draw() {\n\tbackground(0, 10);\n\n}\n\nfunction mouseMoved() {\n\t// send p5.js coordinates\n\tsendOsc('/p5js', [mouseX, mouseY]);\n}\n\nfunction mousePressed() {\n\t// clear Processing drawing on click\n\tsendOsc('/clear', \"\");\n\t// print(socket)\n}\n\n\n/* OSC COMMUNICATION */\nfunction receiveOsc(address, value) {\n\t// debug received message\n\t// print('in: ' + address + ', ' +value)\n\tif(debugIn) {\n\t\tdebugIn.value(address + ', ' + value)\n\t}\n\n\t// visualize message value\n\tlet x = map(address.substring(1), 0, 9, 0, width);\n\tellipse(x, height / 3, width / 10 * value);\n}\n\nfunction sendOsc(address, value) {\n\tif(socket != undefined) {\n\t\tsocket.emit('message', [address].concat(value));\n\t}\n\n\t// debug sent message\n\tif(debugOut) {\n\t\tdebugOut.value(address + ', ' + value)\n\t}\n}\n\nfunction setupOsc(oscHost, oscPortIn, oscPortOut) {\n\tsocket = io.connect('http://127.0.0.1:8082');\n\tsocket.on('connect', function() {\n\t\tsocket.emit('config', {\n\t\t\tserver: {\n\t\t\t\thost: oscHost,\n\t\t\t\tport: oscPortIn\n\t\t\t},\n\t\t\tclient: {\n\t\t\t\thost: oscHost,\n\t\t\t\tport: oscPortOut\n\t\t\t}\n\t\t});\n\t\tprint('OSC Ready!\\n' + oscHost + ', listen: ' + oscPortIn + ', send: ' + oscPortOut);\n\t});\n\tsocket.on('message', function(msg) {\n\t\treceiveOsc(msg[0], msg.splice(1));\n\t});\n}\n\nfunction debugBox(elm, label, x, y, w, h) {\n\tlet telm = createDiv(label).position(x, y);\n\ttelm.style('color', '#fff');\n\ttelm.style('font-family', 'monospace');\n\ttelm.style('padding', '5px');\n\telm.position(x, y + 20).size(w, h).value('');\n\telm.style('color', '#fff');\n\telm.style('background', 'none');\n\telm.style('border', '1px solid #fff');\n\telm.style('resize', 'none');\n\telm.style('padding', '5px');\n\telm.style('outline', 'none');\n}"
            }
          ]
        },
        {
          "name": "_hardware",
          "mod": "1588036223865",
          "type": "folder",
          "toggle": "collapse",
          "contents": [
            {
              "name": "_hardware_gamepad",
              "mod": "1588358761204",
              "type": "sketch",
              "code": "/*\n\t_hardward_gamepad // cc teddavis.org 2020\n\tdemo (for PSX) uses browser's built-in gamepad api\n*/\n\nlet gp, pos, dir, useBG = true,\n\tvel = 5,\n\tshapeMode = 0,\n\tsw = 1;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tpos = createVector(width / 2, height / 2, 50);\n\tdir = createVector(0, 0, 0);\n\trectMode(CENTER);\n\tnoFill();\n\tstroke(255);\n}\n\nfunction draw() {\n\tif(useBG) {\n\t\tbackground(0, 25);\n\t}\n\n\tgpUpdate();\n}\n\n// gamepad connected\nwindow.addEventListener(\"gamepadconnected\", function() {\n\tgp = navigator.getGamepads()[0];\n\tconsole.log(\"gamepad connected!\");\n\tconsole.log(gp);\n});\n\n// gamepad disconnected\nwindow.addEventListener(\"gamepaddisconnected\", function() {\n\tgp = undefined;\n});\n\nfunction gpUpdate() {\n\n\t// draw forms\n\tstrokeWeight(sw);\n\tswitch (shapeMode) {\n\t\tcase 0:\n\t\t\trect(pos.x, pos.y, pos.z);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tline(pos.x - pos.z / 2, pos.y - pos.z / 2, pos.x + pos.z / 2, pos.y + pos.z / 2);\n\t\t\tline(pos.x + pos.z / 2, pos.y - pos.z / 2, pos.x - pos.z / 2, pos.y + pos.z / 2);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tellipse(pos.x, pos.y, pos.z);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\ttriangle(pos.x, pos.y - pos.z / 2, pos.x + pos.z / 2, pos.y + pos.z / 2, pos.x - pos.z / 2, pos.y + pos.z / 2);\n\t\t\tbreak;\n\t}\n\n\t// receive axis + buttons presses\n\tif(gp !== undefined) {\n\t\tgp = navigator.getGamepads()[0];\n\n\t\t// buttons pressed\n\t\tfor(let i = 0; i < gp.buttons.length; i++) {\n\t\t\tif(gp.buttons[i].pressed) {\n\t\t\t\t//\tprint(i);\n\n\t\t\t\t// change shape based on button\n\t\t\t\tif(i < 4) {\n\t\t\t\t\tshapeMode = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\n\t\t// horizontal dpad axis\n\t\tif(gp.axes[0] == 1 || gp.axes[0] == -1) {\n\t\t\tdir.x += gp.axes[0] / 10;\n\t\t}\n\n\t\tpos.x += dir.x * vel;\n\t\tif(pos.x > width + pos.z / 2) {\n\t\t\tpos.x = -pos.z / 2;\n\t\t} else if(pos.x < -pos.z / 2) {\n\t\t\tpos.x = width + pos.z / 2;\n\t\t}\n\n\t\t// vertical dpad axis\n\t\tif(gp.axes[1] == 1 || gp.axes[1] == -1) {\n\t\t\tdir.y += gp.axes[1] / 10;\n\t\t}\n\n\t\tpos.y += dir.y * vel;\n\t\tif(pos.y > height + pos.z / 2) {\n\t\t\tpos.y = -pos.z / 2;\n\t\t} else if(pos.y < -pos.z / 2) {\n\t\t\tpos.y = height + pos.z / 2;\n\t\t}\n\n\t\t// shoulder buttons (R1/L1)\n\t\tif(gp.buttons[5].pressed) {\n\t\t\tpos.z += vel;\n\t\t} else if(gp.buttons[4].pressed) {\n\t\t\tif(pos.z > 15) {\n\t\t\t\tpos.z -= vel;\n\t\t\t}\n\t\t}\n\n\t\t// shoulder triggers (R2/L2)\n\t\tif(gp.buttons[7].pressed) {\n\t\t\tsw += 1;\n\t\t} else if(gp.buttons[6].pressed) {\n\t\t\tif(sw > 1) {\n\t\t\t\tsw -= 1;\n\t\t\t}\n\t\t}\n\n\t\t// start + select\n\t\tif(gp.buttons[9].pressed) {\n\t\t\tdir = createVector(0, 0, 0);\n\t\t} else if(gp.buttons[8].pressed) {\n\t\t\tuseBG = !useBG;\n\t\t}\n\t}\n}"
            }
          ]
        }
      ]
    }
  ],
  "count": {
    "sketches": 21,
    "folders": 10
  }
}